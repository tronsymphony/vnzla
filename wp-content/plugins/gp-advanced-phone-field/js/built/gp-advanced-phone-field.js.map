{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/intl-tel-input/index.js","webpack:///./js/src/frontend.ts","webpack:///./node_modules/intl-tel-input/build/js/intlTelInput.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","$","window","jQuery","args","geoIpLookup","callback","always","resp","countryCode","country","disableMask","$telInput","trigger","formatInputVal","currentNumber","getFormattedNumber","iti","setNumber","intlTelInputUtils","getNumber","numberFormat","E164","console","debug","updateHiddenInputValue","$hiddenInput","formattedNumber","assign","this","document","querySelector","formId","fieldId","closest","length","postedValue","val","initialCountry","defaultCountry","intlTelInputOptions","undefined","preferredCountries","separateDialCode","hiddenInput","utilsScript","GPAPF","pluginUrl","countriesAction","excludeCountries","countries","onlyCountries","attr","countryList","setAttribute","siblings","addEventListener","add","on","GPAdvancedPhoneField","factory","allCountries","iso2","dialCode","priority","areaCodes","_defineProperties","target","props","descriptor","configurable","writable","intlTelInputGlobals","getInstance","input","id","getAttribute","instances","documentReady","readyState","defaults","allowDropdown","autoHideDialCode","autoPlaceholder","customContainer","customPlaceholder","dropdownContainer","formatOnDisplay","localizedCountries","nationalMode","placeholderNumberType","regionlessNanpNumbers","forEachProp","obj","keys","forEachInstance","method","Iti","options","_this","instance","Constructor","TypeError","_classCallCheck","telInput","activeItem","highlightedItem","customOptions","hadInitialPlaceholder","Boolean","protoProps","staticProps","_this2","isMobile","test","navigator","userAgent","body","classList","Promise","autoCountryPromise","resolve","reject","resolveAutoCountryPromise","rejectAutoCountryPromise","utilsScriptPromise","resolveUtilsScriptPromise","rejectUtilsScriptPromise","promise","all","selectedCountryData","_processCountryData","_generateMarkup","_setInitialState","_initListeners","_initRequests","_processAllCountries","_processCountryCodes","_processPreferredCountries","_translateCountriesByLocale","sort","_countryNameSort","countryCodeMaxLen","countryCodes","index","lowerCaseOnlyCountries","map","toLowerCase","filter","indexOf","lowerCaseExcludeCountries","iso","a","b","localeCompare","dialCodes","_addCountryCode","_i","_c","rootCountryCode","j","areaCode","k","partialDialCode","substr","countryData","_getCountryData","push","attrs","container","el","createElement","appendChild","hasAttribute","form","parentClass","wrapper","_createEl","parentNode","insertBefore","flagsContainer","selectedFlag","role","concat","selectedFlagInner","selectedDialCode","dropdownArrow","_appendListItems","dropdown","hiddenInputName","lastIndexOf","type","className","preferred","tmp","idSuffix","insertAdjacentHTML","attributeValue","inputValue","charAt","_getDialCode","isRegionlessNanp","_isRegionlessNanp","_this$options","_updateFlagFromNumber","_setFlag","_updateValFromNumber","_initKeyListeners","_initBlurListeners","_initDropdownListeners","_initHiddenInputListener","_this3","_handleHiddenInputSubmit","tagName","_this4","_handleLabelClick","e","contains","focus","preventDefault","label","_getClosestLabel","_handleClickSelectedFlag","disabled","readOnly","_showDropdown","_handleFlagsContainerKeydown","stopPropagation","_closeDropdown","_this5","loadUtils","_loadAutoCountry","autoCountry","handleAutoCountry","startedLoadingAutoCountry","setTimeout","_this6","_handleKeyupEvent","_triggerCountryChange","_handleClipboardEvent","number","max","_this7","_handleSubmitOrBlurEvent","_removeEmptyDialCode","numeric","_getNumeric","replace","createEvent","initEvent","dispatchEvent","remove","_setDropdownPosition","_highlightListItem","_scrollTo","_bindDropdownListeners","_trigger","shouldHaveClass","_this8","pos","getBoundingClientRect","windowTop","pageYOffset","documentElement","scrollTop","inputTop","top","dropdownHeight","offsetHeight","dropdownFitsBelow","innerHeight","dropdownFitsAbove","_toggleClass","extraTop","style","left","scrollLeft","_handleWindowScroll","_this9","_handleMouseoverCountryList","listItem","_getClosestListItem","_handleClickCountryList","_selectListItem","isOpening","_handleClickOffToClose","query","queryTimer","_handleKeydownOnDropdown","_handleUpDownKey","_handleEnterKey","clearTimeout","_searchForCountry","next","previousElementSibling","nextElementSibling","_startsWith","originalNumber","useNational","_intlTelInputUtils$nu","NATIONAL","INTERNATIONAL","format","formatNumber","_beforeSetNumber","isNanp","alreadySelected","shouldFocus","prevItem","ignoreOnlyCountriesOption","allowFail","Error","prevCountry","title","innerHTML","selectedFlagWidth","offsetWidth","_getHiddenSelectedFlagWidth","paddingLeft","_updatePlaceholder","nextItem","containerClone","cloneNode","visibility","flagsContainerClone","selectedFlagClone","width","removeChild","shouldSetPlaceholder","numberType","placeholder","getExampleNumber","flagChanged","_updateDialCode","len","setSelectionRange","removeEventListener","element","middle","containerHeight","containerTop","containerBottom","elementHeight","elementTop","elementBottom","newScrollTop","middleOffset","heightDifference","newDialCodeBare","hasSelectedListItem","newNumber","inputVal","newDialCode","prevDialCode","includeAreaCode","numericChars","isNaN","parseInt","trim","numericVal","start","_cap","setCountry","removeAttribute","getExtension","_getFullNumber","getNumberType","getValidationError","isValidNumber","originalCountryCode","getCountryData","injectScript","path","handleSuccess","handleFailure","script","onload","onerror","async","src","startedLoadingUtilsScript","version","_init","intlTelInput"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,kBC/ErDhC,EAAOD,QAAU,EAAQ,I,6BCHzB,2BAEMkC,EAAIC,OAAOC,OAajB,EAOC,SAAYC,GAAZ,I,IAAA,OAQC,GA4ED,KAAAC,YAAc,SAACC,GACdH,OACErB,IAAI,qBAAqB,cAAe,QACxCyB,QAAO,SAASC,GAChB,IAAMC,EAAcD,GAAQA,EAAKE,QAAUF,EAAKE,QAAU,KAC1DJ,EAASG,OAOZ,KAAAE,YAAc,WACbV,EAAE,EAAKW,WAAWC,QAAQ,WAG3B,KAAAC,eAAiB,WAChB,IAAMC,EAAgB,EAAKC,qBAEvBD,GAEH,EAAKE,IAAIC,UAAUH,IAIrB,KAAAC,mBAAqB,WACpB,GAAiC,oBAAtBG,kBAOX,OAAO,EAAKF,IAAIG,UAAUD,kBAAkBE,aAAaC,MALxDC,QAAQC,MAAM,qCAYhB,KAAAC,uBAAyB,WACxB,GAAK,EAAKC,aAAV,CAIA,IAAMC,EAAkB,EAAKX,qBAEzBW,IACH,EAAKD,aAAaxC,MAAQyC,EAC1B1B,EAAE,EAAKyB,cAAcb,QAAQ,aApI9BlC,OAAOiD,OAAOC,KAAMzB,GAEpByB,KAAKjB,UAAYkB,SAASC,cACzB,UAAUF,KAAKG,OAAM,IAAIH,KAAKI,UAI3BhC,EAAE4B,KAAKjB,WAAWsB,QAAQ,QAAQC,QAIjCN,KAAKjB,UAAV,CAKA,IAAMwB,EAAcnC,EAAE4B,KAAKjB,WAAWyB,MAEtCR,KAAKlB,cAEL,IAAM2B,EAAoC,QAAtB,EAAGT,KAAKU,sBAAc,QAAI,OAExCC,EAA4C,CACjDF,eAAc,EACdjC,YACoB,SAAnBiC,EAA4BT,KAAKxB,iBAAcoC,EAChDC,mBAA2C,QAAzB,EAAEb,KAAKa,0BAAkB,QAAI,GAC/CC,kBAAkB,EAClBC,YAAa,SAAWf,KAAKI,QAC7BY,YACC3C,OAAO4C,MAAMC,UACb,2CAG2B,YAAzBlB,KAAKmB,gBACRR,EAAoBS,iBACM,YAAzBpB,KAAKmB,gBAAgCnB,KAAKqB,eAAYT,EACpB,YAAzBZ,KAAKmB,kBACfR,EAAoBW,cACM,YAAzBtB,KAAKmB,gBAAgCnB,KAAKqB,eAAYT,GAIxDxC,EAAE4B,KAAKjB,WACLwC,KAAK,KAAM,SAASvB,KAAKG,OAAM,IAAIH,KAAKI,QAAO,QAC/CmB,KAAK,OAAQ,IAGfvB,KAAKZ,IAAM,IAAaY,KAAKjB,UAAW4B,GAIxCX,KAAKZ,IAAIoC,YAAYC,aAAa,MAAO,OAGzCzB,KAAKH,aAAezB,EAAE4B,KAAKjB,WAAW2C,SAAS,mBAAmB,GAElEtD,EAAE4B,KAAKH,cAAc0B,KAAK,KAAM,SAASvB,KAAKG,OAAM,IAAIH,KAAKI,SAE7DJ,KAAKjB,UAAU4C,iBAAiB,QAAS3B,KAAKf,gBAC9Ce,KAAKjB,UAAU4C,iBAAiB,QAAS3B,KAAKf,gBAE9Ce,KAAKjB,UAAU4C,iBAAiB,QAAS3B,KAAKJ,wBAC9CI,KAAKjB,UAAU4C,iBAAiB,QAAS3B,KAAKJ,wBAC9CI,KAAKjB,UAAU4C,iBACd,gBACA3B,KAAKJ,wBAINxB,EAAE4B,KAAKH,cACL+B,IAAI5B,KAAKjB,WACT8C,GAAG,gCAAiC7B,KAAKf,gBAMvCsB,GACHnC,EAAE4B,KAAKH,cAAcW,IAAID,KA0D5BlC,OAAOyD,qBAAuBA,G,gBCzJ9B,IAAUC,IAEP,SAASnB,GACR,aACA,OAAO,WAiBH,IAFA,IAAIoB,EAAe,CAAE,CAAE,6BAA8B,KAAM,MAAQ,CAAE,qBAAsB,KAAM,OAAS,CAAE,uBAAwB,KAAM,OAAS,CAAE,iBAAkB,KAAM,IAAK,EAAG,CAAE,QAAW,CAAE,UAAW,KAAM,OAAS,CAAE,SAAU,KAAM,OAAS,CAAE,WAAY,KAAM,IAAK,EAAG,CAAE,QAAW,CAAE,sBAAuB,KAAM,IAAK,EAAG,CAAE,QAAW,CAAE,YAAa,KAAM,MAAQ,CAAE,qBAAsB,KAAM,OAAS,CAAE,QAAS,KAAM,OAAS,CAAE,mBAAoB,KAAM,OAAS,CAAE,YAAa,KAAM,KAAM,GAAK,CAAE,uBAAwB,KAAM,MAAQ,CAAE,0BAA2B,KAAM,OAAS,CAAE,UAAW,KAAM,IAAK,EAAG,CAAE,QAAW,CAAE,uBAAwB,KAAM,OAAS,CAAE,wBAAyB,KAAM,OAAS,CAAE,WAAY,KAAM,IAAK,EAAG,CAAE,QAAW,CAAE,qBAAsB,KAAM,OAAS,CAAE,mBAAoB,KAAM,MAAQ,CAAE,SAAU,KAAM,OAAS,CAAE,gBAAiB,KAAM,OAAS,CAAE,UAAW,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,iBAAkB,KAAM,OAAS,CAAE,UAAW,KAAM,OAAS,CAAE,+CAAgD,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,kBAAmB,KAAM,MAAQ,CAAE,iCAAkC,KAAM,OAAS,CAAE,yBAA0B,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,SAAU,KAAM,OAAS,CAAE,sBAAuB,KAAM,OAAS,CAAE,eAAgB,KAAM,OAAS,CAAE,qBAAsB,KAAM,OAAS,CAAE,qBAAsB,KAAM,OAAS,CAAE,sBAAuB,KAAM,OAAS,CAAE,SAAU,KAAM,IAAK,EAAG,CAAE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,QAAW,CAAE,0BAA2B,KAAM,OAAS,CAAE,wBAAyB,KAAM,MAAO,EAAG,CAAE,IAAK,IAAK,MAAS,CAAE,iBAAkB,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,uDAAwD,KAAM,OAAS,CAAE,eAAgB,KAAM,OAAS,CAAE,QAAS,KAAM,MAAQ,CAAE,aAAc,KAAM,MAAQ,CAAE,mBAAoB,KAAM,KAAM,EAAG,CAAE,UAAa,CAAE,0BAA2B,KAAM,KAAM,EAAG,CAAE,UAAa,CAAE,WAAY,KAAM,MAAQ,CAAE,yBAA0B,KAAM,OAAS,CAAE,iDAAkD,KAAM,OAAS,CAAE,uCAAwC,KAAM,OAAS,CAAE,eAAgB,KAAM,OAAS,CAAE,aAAc,KAAM,OAAS,CAAE,gBAAiB,KAAM,OAAS,CAAE,qBAAsB,KAAM,OAAS,CAAE,OAAQ,KAAM,MAAQ,CAAE,UAAW,KAAM,MAAO,GAAK,CAAE,kBAAmB,KAAM,OAAS,CAAE,mCAAoC,KAAM,OAAS,CAAE,oBAAqB,KAAM,MAAQ,CAAE,WAAY,KAAM,OAAS,CAAE,WAAY,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,4CAA6C,KAAM,IAAK,EAAG,CAAE,MAAO,MAAO,QAAW,CAAE,UAAW,KAAM,OAAS,CAAE,iBAAkB,KAAM,MAAQ,CAAE,cAAe,KAAM,OAAS,CAAE,wCAAyC,KAAM,OAAS,CAAE,UAAW,KAAM,OAAS,CAAE,kBAAmB,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,oCAAqC,KAAM,OAAS,CAAE,0BAA2B,KAAM,OAAS,CAAE,OAAQ,KAAM,OAAS,CAAE,kBAAmB,KAAM,MAAO,GAAK,CAAE,SAAU,KAAM,MAAQ,CAAE,mCAAoC,KAAM,OAAS,CAAE,yCAA0C,KAAM,OAAS,CAAE,QAAS,KAAM,OAAS,CAAE,SAAU,KAAM,OAAS,CAAE,uBAAwB,KAAM,OAAS,CAAE,wBAAyB,KAAM,MAAQ,CAAE,gBAAiB,KAAM,OAAS,CAAE,YAAa,KAAM,OAAS,CAAE,kBAAmB,KAAM,MAAQ,CAAE,+BAAgC,KAAM,OAAS,CAAE,UAAW,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,aAAc,KAAM,MAAO,GAAK,CAAE,OAAQ,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,YAAa,KAAM,OAAS,CAAE,WAAY,KAAM,KAAM,EAAG,CAAE,OAAQ,OAAQ,OAAQ,SAAY,CAAE,kBAAmB,KAAM,OAAS,CAAE,+BAAgC,KAAM,OAAS,CAAE,SAAU,KAAM,OAAS,CAAE,QAAS,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,iBAAkB,KAAM,OAAS,CAAE,yBAA0B,KAAM,MAAQ,CAAE,mBAAoB,KAAM,OAAS,CAAE,eAAgB,KAAM,MAAQ,CAAE,YAAa,KAAM,MAAQ,CAAE,kBAAmB,KAAM,MAAQ,CAAE,mBAAoB,KAAM,OAAS,CAAE,UAAW,KAAM,OAAS,CAAE,cAAe,KAAM,KAAM,EAAG,CAAE,OAAQ,QAAS,OAAQ,OAAQ,SAAY,CAAE,oBAAqB,KAAM,OAAS,CAAE,iBAAkB,KAAM,KAAM,GAAK,CAAE,UAAW,KAAM,IAAK,EAAG,CAAE,MAAO,QAAW,CAAE,aAAc,KAAM,MAAQ,CAAE,SAAU,KAAM,KAAM,EAAG,CAAE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,SAAY,CAAE,qBAAsB,KAAM,OAAS,CAAE,yBAA0B,KAAM,IAAK,EAAG,CAAE,KAAM,MAAS,CAAE,QAAS,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,SAAU,KAAM,OAAS,CAAE,qBAAsB,KAAM,OAAS,CAAE,0BAA2B,KAAM,OAAS,CAAE,aAAc,KAAM,OAAS,CAAE,mBAAoB,KAAM,OAAS,CAAE,qBAAsB,KAAM,OAAS,CAAE,UAAW,KAAM,OAAS,CAAE,UAAW,KAAM,OAAS,CAAE,mBAAoB,KAAM,OAAS,CAAE,gBAAiB,KAAM,OAAS,CAAE,sBAAuB,KAAM,OAAS,CAAE,aAAc,KAAM,OAAS,CAAE,aAAc,KAAM,OAAS,CAAE,iCAAkC,KAAM,OAAS,CAAE,4BAA6B,KAAM,OAAS,CAAE,SAAU,KAAM,OAAS,CAAE,WAAY,KAAM,MAAQ,CAAE,WAAY,KAAM,OAAS,CAAE,OAAQ,KAAM,OAAS,CAAE,QAAS,KAAM,OAAS,CAAE,mBAAoB,KAAM,OAAS,CAAE,aAAc,KAAM,OAAS,CAAE,4BAA6B,KAAM,OAAS,CAAE,oBAAqB,KAAM,OAAS,CAAE,UAAW,KAAM,MAAO,EAAG,CAAE,MAAO,QAAW,CAAE,kBAAmB,KAAM,MAAQ,CAAE,aAAc,KAAM,OAAS,CAAE,8BAA+B,KAAM,OAAS,CAAE,SAAU,KAAM,OAAS,CAAE,oBAAqB,KAAM,OAAS,CAAE,yBAA0B,KAAM,OAAS,CAAE,aAAc,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,sBAAuB,KAAM,MAAO,GAAK,CAAE,0BAA2B,KAAM,OAAS,CAAE,2BAA4B,KAAM,MAAQ,CAAE,oBAAqB,KAAM,OAAS,CAAE,QAAS,KAAM,OAAS,CAAE,gBAAiB,KAAM,OAAS,CAAE,0BAA2B,KAAM,MAAQ,CAAE,qCAAsC,KAAM,OAAS,CAAE,cAAe,KAAM,MAAQ,CAAE,YAAa,KAAM,OAAS,CAAE,gBAAiB,KAAM,OAAS,CAAE,UAAW,KAAM,OAAS,CAAE,OAAQ,KAAM,OAAS,CAAE,iBAAkB,KAAM,OAAS,CAAE,+BAAgC,KAAM,OAAS,CAAE,2BAA4B,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,iBAAkB,KAAM,KAAM,GAAK,CAAE,kBAAmB,KAAM,OAAS,CAAE,wBAAyB,KAAM,MAAQ,CAAE,QAAS,KAAM,OAAS,CAAE,wBAAyB,KAAM,OAAS,CAAE,kBAAmB,KAAM,OAAS,CAAE,mBAAoB,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,cAAe,KAAM,MAAQ,CAAE,cAAe,KAAM,MAAQ,CAAE,kBAAmB,KAAM,MAAQ,CAAE,WAAY,KAAM,OAAS,CAAE,cAAe,KAAM,IAAK,EAAG,CAAE,MAAO,QAAW,CAAE,iBAAkB,KAAM,OAAS,CAAE,uBAAwB,KAAM,MAAO,GAAK,CAAE,oBAAqB,KAAM,MAAQ,CAAE,kBAAmB,KAAM,IAAK,GAAK,CAAE,SAAU,KAAM,OAAS,CAAE,mBAAoB,KAAM,MAAO,GAAK,CAAE,eAAgB,KAAM,OAAS,CAAE,wBAAyB,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,cAAe,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,iDAAkD,KAAM,MAAO,GAAK,CAAE,uDAAwD,KAAM,OAAS,CAAE,mCAAoC,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,QAAS,KAAM,OAAS,CAAE,aAAc,KAAM,OAAS,CAAE,8CAA+C,KAAM,OAAS,CAAE,6CAA8C,KAAM,OAAS,CAAE,oBAAqB,KAAM,OAAS,CAAE,kBAAmB,KAAM,OAAS,CAAE,aAAc,KAAM,OAAS,CAAE,eAAgB,KAAM,OAAS,CAAE,YAAa,KAAM,MAAQ,CAAE,eAAgB,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,uBAAwB,KAAM,OAAS,CAAE,uBAAwB,KAAM,OAAS,CAAE,kBAAmB,KAAM,OAAS,CAAE,uBAAwB,KAAM,OAAS,CAAE,eAAgB,KAAM,MAAQ,CAAE,qBAAsB,KAAM,MAAQ,CAAE,gCAAiC,KAAM,OAAS,CAAE,iBAAkB,KAAM,MAAQ,CAAE,0BAA2B,KAAM,MAAQ,CAAE,qBAAsB,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,yBAA0B,KAAM,KAAM,EAAG,CAAE,OAAU,CAAE,mBAAoB,KAAM,MAAQ,CAAE,wBAAyB,KAAM,MAAQ,CAAE,mBAAoB,KAAM,OAAS,CAAE,cAAe,KAAM,OAAS,CAAE,aAAc,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,iBAAkB,KAAM,MAAQ,CAAE,cAAe,KAAM,OAAS,CAAE,OAAQ,KAAM,OAAS,CAAE,UAAW,KAAM,OAAS,CAAE,QAAS,KAAM,OAAS,CAAE,sBAAuB,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,oBAAqB,KAAM,OAAS,CAAE,mBAAoB,KAAM,MAAQ,CAAE,eAAgB,KAAM,OAAS,CAAE,2BAA4B,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,SAAU,KAAM,OAAS,CAAE,sBAAuB,KAAM,IAAK,GAAI,CAAE,QAAW,CAAE,SAAU,KAAM,OAAS,CAAE,oBAAqB,KAAM,OAAS,CAAE,qDAAsD,KAAM,OAAS,CAAE,iBAAkB,KAAM,KAAM,GAAK,CAAE,gBAAiB,KAAM,IAAK,GAAK,CAAE,UAAW,KAAM,OAAS,CAAE,2BAA4B,KAAM,OAAS,CAAE,UAAW,KAAM,OAAS,CAAE,oCAAqC,KAAM,KAAM,EAAG,CAAE,UAAa,CAAE,YAAa,KAAM,MAAQ,CAAE,qBAAsB,KAAM,MAAQ,CAAE,uCAAwC,KAAM,OAAS,CAAE,sCAAuC,KAAM,MAAO,EAAG,CAAE,OAAQ,SAAY,CAAE,mBAAoB,KAAM,OAAS,CAAE,SAAU,KAAM,OAAS,CAAE,WAAY,KAAM,OAAS,CAAE,gBAAiB,KAAM,MAAO,EAAG,CAAE,QAEnoT5F,EAAI,EAAGA,EAAI4F,EAAa1B,OAAQlE,IAAK,CAC1C,IAAIK,EAAIuF,EAAa5F,GACrB4F,EAAa5F,GAAK,CACdO,KAAMF,EAAE,GACRwF,KAAMxF,EAAE,GACRyF,SAAUzF,EAAE,GACZ0F,SAAU1F,EAAE,IAAM,EAClB2F,UAAW3F,EAAE,IAAM,MAS3B,SAAS4F,EAAkBC,EAAQC,GAC/B,IAAK,IAAInG,EAAI,EAAGA,EAAImG,EAAMjC,OAAQlE,IAAK,CACnC,IAAIoG,EAAaD,EAAMnG,GACvBoG,EAAWxF,WAAawF,EAAWxF,aAAc,EACjDwF,EAAWC,cAAe,EACtB,UAAWD,IAAYA,EAAWE,UAAW,GACjD5F,OAAOC,eAAeuF,EAAQE,EAAW7E,IAAK6E,IAQtD,IAAIG,EAAsB,CACtBC,YAAa,SAAqBC,GAC9B,IAAIC,EAAKD,EAAME,aAAa,0BAC5B,OAAO1E,OAAOsE,oBAAoBK,UAAUF,IAEhDE,UAAW,GAEXC,cAAe,WACX,MAA+B,aAAxBhD,SAASiD,aAGF,iBAAX7E,SAAqBA,OAAOsE,oBAAsBA,GAE7D,IAAIG,EAAK,EACLK,EAAW,CAEXC,eAAe,EAEfC,kBAAkB,EAElBC,gBAAiB,SAEjBC,gBAAiB,GAEjBC,kBAAmB,KAEnBC,kBAAmB,KAEnBrC,iBAAkB,GAElBsC,iBAAiB,EAEjBlF,YAAa,KAEbuC,YAAa,GAEbN,eAAgB,GAEhBkD,mBAAoB,KAEpBC,cAAc,EAEdtC,cAAe,GAEfuC,sBAAuB,SAEvBhD,mBAAoB,CAAE,KAAM,MAE5BC,kBAAkB,EAElBE,YAAa,IAGb8C,EAAwB,CAAE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAG1IC,EAAc,SAAqBC,EAAKvF,GAExC,IADA,IAAIwF,EAAOnH,OAAOmH,KAAKD,GACd5H,EAAI,EAAGA,EAAI6H,EAAK3D,OAAQlE,IAC7BqC,EAASwF,EAAK7H,GAAI4H,EAAIC,EAAK7H,MAI/B8H,EAAkB,SAAyBC,GAC3CJ,EAAY1F,OAAOsE,oBAAoBK,WAAW,SAASrF,GACvDU,OAAOsE,oBAAoBK,UAAUrF,GAAKwG,SAK9CC,EACJ,WACI,SAASA,EAAIvB,EAAOwB,GAChB,IAAIC,EAAQtE,MA5FpB,SAAyBuE,EAAUC,GAC/B,KAAMD,aAAoBC,GACtB,MAAM,IAAIC,UAAU,qCA2FpBC,CAAgB1E,KAAMoE,GACtBpE,KAAK8C,GAAKA,IACV9C,KAAK2E,SAAW9B,EAChB7C,KAAK4E,WAAa,KAClB5E,KAAK6E,gBAAkB,KAGvB,IAAIC,EAAgBT,GAAW,GAC/BrE,KAAKqE,QAAU,GACfN,EAAYZ,GAAU,SAASxF,EAAKN,GAChCiH,EAAMD,QAAQ1G,GAAOmH,EAAc7G,eAAeN,GAAOmH,EAAcnH,GAAON,KAElF2C,KAAK+E,sBAAwBC,QAAQnC,EAAME,aAAa,gBA3FhE,IAAsByB,EAAaS,EAAYC,EAytC3C,OAztCkBV,EA6FLJ,GA7FkBa,EA6Fb,CAAE,CAChBtH,IAAK,QACLN,MAAO,WACH,IAAI8H,EAASnF,KAwBb,GAtBIA,KAAKqE,QAAQT,eAAc5D,KAAKqE,QAAQhB,kBAAmB,GAI3DrD,KAAKqE,QAAQvD,mBACbd,KAAKqE,QAAQhB,iBAAmBrD,KAAKqE,QAAQT,cAAe,GAOhE5D,KAAKoF,SAAW,oEAAoEC,KAAKC,UAAUC,WAC/FvF,KAAKoF,WAELnF,SAASuF,KAAKC,UAAU7D,IAAI,cAEvB5B,KAAKqE,QAAQZ,oBAAmBzD,KAAKqE,QAAQZ,kBAAoBxD,SAASuF,OAK5D,oBAAZE,QAAyB,CAChC,IAAIC,EAAqB,IAAID,SAAQ,SAASE,EAASC,GACnDV,EAAOW,0BAA4BF,EACnCT,EAAOY,yBAA2BF,KAElCG,EAAqB,IAAIN,SAAQ,SAASE,EAASC,GACnDV,EAAOc,0BAA4BL,EACnCT,EAAOe,yBAA2BL,KAEtC7F,KAAKmG,QAAUT,QAAQU,IAAI,CAAET,EAAoBK,SAGjDhG,KAAK8F,0BAA4B9F,KAAK+F,yBAA2B,aACjE/F,KAAKiG,0BAA4BjG,KAAKkG,yBAA2B,aAIrElG,KAAKqG,oBAAsB,GAE3BrG,KAAKsG,sBAELtG,KAAKuG,kBAELvG,KAAKwG,mBAELxG,KAAKyG,iBAELzG,KAAK0G,kBAEV,CACC/I,IAAK,sBACLN,MAAO,WAEH2C,KAAK2G,uBAEL3G,KAAK4G,uBAEL5G,KAAK6G,6BAED7G,KAAKqE,QAAQV,oBAAoB3D,KAAK8G,+BAEtC9G,KAAKqE,QAAQ/C,cAAchB,QAAUN,KAAKqE,QAAQV,qBAClD3D,KAAKqB,UAAU0F,KAAK/G,KAAKgH,oBAGlC,CACCrJ,IAAK,kBACLN,MAAO,SAAyB4E,EAAMrD,EAAauD,GAC3CvD,EAAY0B,OAASN,KAAKiH,oBAC1BjH,KAAKiH,kBAAoBrI,EAAY0B,QAEpCN,KAAKkH,aAAajJ,eAAeW,KAClCoB,KAAKkH,aAAatI,GAAe,IAGrC,IAAK,IAAIxC,EAAI,EAAGA,EAAI4D,KAAKkH,aAAatI,GAAa0B,OAAQlE,IACvD,GAAI4D,KAAKkH,aAAatI,GAAaxC,KAAO6F,EAAM,OAGpD,IAAIkF,EAAQhF,IAAavB,EAAYuB,EAAWnC,KAAKkH,aAAatI,GAAa0B,OAC/EN,KAAKkH,aAAatI,GAAauI,GAASlF,IAE7C,CACCtE,IAAK,uBACLN,MAAO,WACH,GAAI2C,KAAKqE,QAAQ/C,cAAchB,OAAQ,CACnC,IAAI8G,EAAyBpH,KAAKqE,QAAQ/C,cAAc+F,KAAI,SAASxI,GACjE,OAAOA,EAAQyI,iBAEnBtH,KAAKqB,UAAYW,EAAauF,QAAO,SAAS1I,GAC1C,OAAOuI,EAAuBI,QAAQ3I,EAAQoD,OAAS,UAExD,GAAIjC,KAAKqE,QAAQjD,iBAAiBd,OAAQ,CAC7C,IAAImH,EAA4BzH,KAAKqE,QAAQjD,iBAAiBiG,KAAI,SAASxI,GACvE,OAAOA,EAAQyI,iBAEnBtH,KAAKqB,UAAYW,EAAauF,QAAO,SAAS1I,GAC1C,OAA4D,IAArD4I,EAA0BD,QAAQ3I,EAAQoD,cAGrDjC,KAAKqB,UAAYW,IAG1B,CACCrE,IAAK,8BACLN,MAAO,WACH,IAAK,IAAIjB,EAAI,EAAGA,EAAI4D,KAAKqB,UAAUf,OAAQlE,IAAK,CAC5C,IAAIsL,EAAM1H,KAAKqB,UAAUjF,GAAG6F,KAAKqF,cAC7BtH,KAAKqE,QAAQV,mBAAmB1F,eAAeyJ,KAC/C1H,KAAKqB,UAAUjF,GAAGO,KAAOqD,KAAKqE,QAAQV,mBAAmB+D,OAItE,CACC/J,IAAK,mBACLN,MAAO,SAA0BsK,EAAGC,GAChC,OAAOD,EAAEhL,KAAKkL,cAAcD,EAAEjL,QAEnC,CACCgB,IAAK,uBACLN,MAAO,WACH2C,KAAKiH,kBAAoB,EAEzBjH,KAAK8H,UAAY,GAEjB9H,KAAKkH,aAAe,GAEpB,IAAK,IAAI9K,EAAI,EAAGA,EAAI4D,KAAKqB,UAAUf,OAAQlE,IAAK,CAC5C,IAAIK,EAAIuD,KAAKqB,UAAUjF,GAClB4D,KAAK8H,UAAUrL,EAAEyF,YAAWlC,KAAK8H,UAAUrL,EAAEyF,WAAY,GAC9DlC,KAAK+H,gBAAgBtL,EAAEwF,KAAMxF,EAAEyF,SAAUzF,EAAE0F,UAM/C,IAAK,IAAI6F,EAAK,EAAGA,EAAKhI,KAAKqB,UAAUf,OAAQ0H,IAAM,CAC/C,IAAIC,EAAKjI,KAAKqB,UAAU2G,GAExB,GAAIC,EAAG7F,UAGH,IAFA,IAAI8F,EAAkBlI,KAAKkH,aAAae,EAAG/F,UAAU,GAE5CiG,EAAI,EAAGA,EAAIF,EAAG7F,UAAU9B,OAAQ6H,IAAK,CAG1C,IAFA,IAAIC,EAAWH,EAAG7F,UAAU+F,GAEnBE,EAAI,EAAGA,EAAID,EAAS9H,OAAQ+H,IAAK,CACtC,IAAIC,EAAkBL,EAAG/F,SAAWkG,EAASG,OAAO,EAAGF,GAEvDrI,KAAK+H,gBAAgBG,EAAiBI,GACtCtI,KAAK+H,gBAAgBE,EAAGhG,KAAMqG,GAGlCtI,KAAK+H,gBAAgBE,EAAGhG,KAAMgG,EAAG/F,SAAWkG,OAK7D,CACCzK,IAAK,6BACLN,MAAO,WACH2C,KAAKa,mBAAqB,GAC1B,IAAK,IAAIzE,EAAI,EAAGA,EAAI4D,KAAKqE,QAAQxD,mBAAmBP,OAAQlE,IAAK,CAC7D,IAAIwC,EAAcoB,KAAKqE,QAAQxD,mBAAmBzE,GAAGkL,cACjDkB,EAAcxI,KAAKyI,gBAAgB7J,GAAa,GAAO,GACvD4J,GAAaxI,KAAKa,mBAAmB6H,KAAKF,MAGvD,CACC7K,IAAK,YACLN,MAAO,SAAmBV,EAAMgM,EAAOC,GACnC,IAAIC,EAAK5I,SAAS6I,cAAcnM,GAKhC,OAJIgM,GAAO5E,EAAY4E,GAAO,SAAShL,EAAKN,GACxC,OAAOwL,EAAGpH,aAAa9D,EAAKN,MAE5BuL,GAAWA,EAAUG,YAAYF,GAC9BA,IAEZ,CACClL,IAAK,kBACLN,MAAO,WAKE2C,KAAK2E,SAASqE,aAAa,iBAAqBhJ,KAAK2E,SAASsE,MAAQjJ,KAAK2E,SAASsE,KAAKD,aAAa,iBACvGhJ,KAAK2E,SAASlD,aAAa,eAAgB,OAG/C,IAAIyH,EAAc,MACdlJ,KAAKqE,QAAQjB,gBAAe8F,GAAe,wBAC3ClJ,KAAKqE,QAAQvD,mBAAkBoI,GAAe,4BAC9ClJ,KAAKqE,QAAQd,kBACb2F,GAAe,IACfA,GAAelJ,KAAKqE,QAAQd,iBAEhC,IAAI4F,EAAUnJ,KAAKoJ,UAAU,MAAO,CAChC,MAASF,IAuDb,GArDAlJ,KAAK2E,SAAS0E,WAAWC,aAAaH,EAASnJ,KAAK2E,UACpD3E,KAAKuJ,eAAiBvJ,KAAKoJ,UAAU,MAAO,CACxC,MAAS,uBACVD,GACHA,EAAQJ,YAAY/I,KAAK2E,UAEzB3E,KAAKwJ,aAAexJ,KAAKoJ,UAAU,MAAO,CACtC,MAAS,qBACTK,KAAM,WACN,gBAAiB,OAAOC,OAAO1J,KAAK8C,GAAI,qBACxC,YAAa,OAAO4G,OAAO1J,KAAK8C,GAAI,qBACpC,gBAAiB,SAClB9C,KAAKuJ,gBACRvJ,KAAK2J,kBAAoB3J,KAAKoJ,UAAU,MAAO,CAC3C,MAAS,aACVpJ,KAAKwJ,cACJxJ,KAAKqE,QAAQvD,mBACbd,KAAK4J,iBAAmB5J,KAAKoJ,UAAU,MAAO,CAC1C,MAAS,2BACVpJ,KAAKwJ,eAERxJ,KAAKqE,QAAQjB,gBAEbpD,KAAKwJ,aAAa/H,aAAa,WAAY,KAC3CzB,KAAK6J,cAAgB7J,KAAKoJ,UAAU,MAAO,CACvC,MAAS,cACVpJ,KAAKwJ,cAERxJ,KAAKwB,YAAcxB,KAAKoJ,UAAU,KAAM,CACpC,MAAS,8BACTtG,GAAI,OAAO4G,OAAO1J,KAAK8C,GAAI,qBAC3B2G,KAAM,UACN,aAAc,sBAEdzJ,KAAKa,mBAAmBP,SACxBN,KAAK8J,iBAAiB9J,KAAKa,mBAAoB,kBAAkB,GACjEb,KAAKoJ,UAAU,KAAM,CACjB,MAAS,eACTK,KAAM,YACN,gBAAiB,QAClBzJ,KAAKwB,cAEZxB,KAAK8J,iBAAiB9J,KAAKqB,UAAW,iBAElCrB,KAAKqE,QAAQZ,mBACbzD,KAAK+J,SAAW/J,KAAKoJ,UAAU,MAAO,CAClC,MAAS,uBAEbpJ,KAAK+J,SAAShB,YAAY/I,KAAKwB,cAE/BxB,KAAKuJ,eAAeR,YAAY/I,KAAKwB,cAGzCxB,KAAKqE,QAAQtD,YAAa,CAC1B,IAAIiJ,EAAkBhK,KAAKqE,QAAQtD,YAC/BpE,EAAOqD,KAAK2E,SAAS5B,aAAa,QACtC,GAAIpG,EAAM,CACN,IAAIP,EAAIO,EAAKsN,YAAY,MAGd,IAAP7N,IAAU4N,EAAkB,GAAGN,OAAO/M,EAAK4L,OAAO,EAAGnM,GAAI,KAAKsN,OAAOM,EAAiB,MAE9FhK,KAAKe,YAAcf,KAAKoJ,UAAU,QAAS,CACvCc,KAAM,SACNvN,KAAMqN,IAEVb,EAAQJ,YAAY/I,KAAKe,gBAGlC,CACCpD,IAAK,mBACLN,MAAO,SAA0BgE,EAAW8I,EAAWC,GAKnD,IAFA,IAAIC,EAAM,GAEDjO,EAAI,EAAGA,EAAIiF,EAAUf,OAAQlE,IAAK,CACvC,IAAIK,EAAI4E,EAAUjF,GACdkO,EAAWF,EAAY,aAAe,GAE1CC,GAAO,2BAA2BX,OAAOS,EAAW,4BAA4BT,OAAO1J,KAAK8C,GAAI,WAAW4G,OAAOjN,EAAEwF,MAAMyH,OAAOY,EAAU,oCAAoCZ,OAAOjN,EAAEyF,SAAU,yBAAyBwH,OAAOjN,EAAEwF,KAAM,4BAE1OoI,GAAO,yDAAyDX,OAAOjN,EAAEwF,KAAM,kBAE/EoI,GAAO,mCAAmCX,OAAOjN,EAAEE,KAAM,WACzD0N,GAAO,iCAAiCX,OAAOjN,EAAEyF,SAAU,WAE3DmI,GAAO,QAEXrK,KAAKwB,YAAY+I,mBAAmB,YAAaF,KAEtD,CACC1M,IAAK,mBACLN,MAAO,WAIH,IAAImN,EAAiBxK,KAAK2E,SAAS5B,aAAa,SAC5C0H,EAAazK,KAAK2E,SAAStH,MAE3BmD,GADegK,GAA+C,MAA7BA,EAAeE,OAAO,IAAgBD,GAAuC,MAAzBA,EAAWC,OAAO,GACjED,EAAjBD,EACrBtI,EAAWlC,KAAK2K,aAAanK,GAC7BoK,EAAmB5K,KAAK6K,kBAAkBrK,GAC1CsK,EAAgB9K,KAAKqE,QAAS5D,EAAiBqK,EAAcrK,eAAgBmD,EAAekH,EAAclH,aAAcP,EAAmByH,EAAczH,iBAAkBvC,EAAmBgK,EAAchK,iBAG5MoB,IAAa0I,EACb5K,KAAK+K,sBAAsBvK,GACD,SAAnBC,IAEHA,EACAT,KAAKgL,SAASvK,EAAe6G,eAEzBpF,GAAY0I,EAEZ5K,KAAKgL,SAAS,OAGdhL,KAAKU,eAAiBV,KAAKa,mBAAmBP,OAASN,KAAKa,mBAAmB,GAAGoB,KAAOjC,KAAKqB,UAAU,GAAGY,KACtGzB,GACDR,KAAKgL,SAAShL,KAAKU,iBAK1BF,GAAQoD,GAAiBP,GAAqBvC,IAC/Cd,KAAK2E,SAAStH,MAAQ,IAAIqM,OAAO1J,KAAKqG,oBAAoBnE,YAK9D1B,GAAKR,KAAKiL,qBAAqBzK,KAExC,CACC7C,IAAK,iBACLN,MAAO,WACH2C,KAAKkL,oBACDlL,KAAKqE,QAAQhB,kBAAkBrD,KAAKmL,qBACpCnL,KAAKqE,QAAQjB,eAAepD,KAAKoL,yBACjCpL,KAAKe,aAAaf,KAAKqL,6BAEhC,CACC1N,IAAK,2BACLN,MAAO,WACH,IAAIiO,EAAStL,KACbA,KAAKuL,yBAA2B,WAC5BD,EAAOvK,YAAY1D,MAAQiO,EAAO/L,aAElCS,KAAK2E,SAASsE,MAAMjJ,KAAK2E,SAASsE,KAAKtH,iBAAiB,SAAU3B,KAAKuL,4BAEhF,CACC5N,IAAK,mBACLN,MAAO,WAEH,IADA,IAAIwL,EAAK7I,KAAK2E,SACPkE,GAAqB,UAAfA,EAAG2C,SACZ3C,EAAKA,EAAGQ,WAEZ,OAAOR,IAEZ,CACClL,IAAK,yBACLN,MAAO,WACH,IAAIoO,EAASzL,KAIbA,KAAK0L,kBAAoB,SAASC,GAE1BF,EAAOjK,YAAYiE,UAAUmG,SAAS,aAAcH,EAAO9G,SAASkH,QAAcF,EAAEG,kBAE5F,IAAIC,EAAQ/L,KAAKgM,mBACbD,GAAOA,EAAMpK,iBAAiB,QAAS3B,KAAK0L,mBAEhD1L,KAAKiM,yBAA2B,YAIxBR,EAAOjK,YAAYiE,UAAUmG,SAAS,cAAiBH,EAAO9G,SAASuH,UAAaT,EAAO9G,SAASwH,UACpGV,EAAOW,iBAGfpM,KAAKwJ,aAAa7H,iBAAiB,QAAS3B,KAAKiM,0BAEjDjM,KAAKqM,6BAA+B,SAASV,GAClBF,EAAOjK,YAAYiE,UAAUmG,SAAS,eACsC,IAA3E,CAAE,UAAW,KAAM,YAAa,OAAQ,IAAK,SAAUpE,QAAQmE,EAAEhO,OAErFgO,EAAEG,iBAEFH,EAAEW,kBACFb,EAAOW,iBAGG,QAAVT,EAAEhO,KAAe8N,EAAOc,kBAEhCvM,KAAKuJ,eAAe5H,iBAAiB,UAAW3B,KAAKqM,gCAE1D,CACC1O,IAAK,gBACLN,MAAO,WACH,IAAImP,EAASxM,KAETA,KAAKqE,QAAQrD,cAAgB3C,OAAOiB,kBAEhCjB,OAAOsE,oBAAoBM,gBAC3B5E,OAAOsE,oBAAoB8J,UAAUzM,KAAKqE,QAAQrD,aAGlD3C,OAAOsD,iBAAiB,QAAQ,WAC5BtD,OAAOsE,oBAAoB8J,UAAUD,EAAOnI,QAAQrD,gBAGzDhB,KAAKiG,4BACwB,SAAhCjG,KAAKqE,QAAQ5D,eAA2BT,KAAK0M,mBAAyB1M,KAAK8F,8BAEpF,CACCnI,IAAK,mBACLN,MAAO,WAKCgB,OAAOsE,oBAAoBgK,YAC3B3M,KAAK4M,oBACGvO,OAAOsE,oBAAoBkK,4BAEnCxO,OAAOsE,oBAAoBkK,2BAA4B,EACf,mBAA7B7M,KAAKqE,QAAQ7F,aACpBwB,KAAKqE,QAAQ7F,aAAY,SAASI,GAC9BP,OAAOsE,oBAAoBgK,YAAc/N,EAAY0I,cAOrDwF,YAAW,WACP,OAAO5I,EAAgB,2BAE5B,WACC,OAAOA,EAAgB,kCAKxC,CACCvG,IAAK,oBACLN,MAAO,WACH,IAAI0P,EAAS/M,KAEbA,KAAKgN,kBAAoB,WACjBD,EAAOhC,sBAAsBgC,EAAOpI,SAAStH,QAC7C0P,EAAOE,yBAGfjN,KAAK2E,SAAShD,iBAAiB,QAAS3B,KAAKgN,mBAE7ChN,KAAKkN,sBAAwB,WAEzBJ,WAAWC,EAAOC,oBAEtBhN,KAAK2E,SAAShD,iBAAiB,MAAO3B,KAAKkN,uBAC3ClN,KAAK2E,SAAShD,iBAAiB,QAAS3B,KAAKkN,yBAElD,CACCvP,IAAK,OACLN,MAAO,SAAc8P,GACjB,IAAIC,EAAMpN,KAAK2E,SAAS5B,aAAa,aACrC,OAAOqK,GAAOD,EAAO7M,OAAS8M,EAAMD,EAAO5E,OAAO,EAAG6E,GAAOD,IAEjE,CACCxP,IAAK,qBACLN,MAAO,WACH,IAAIgQ,EAASrN,KAEbA,KAAKsN,yBAA2B,WAC5BD,EAAOE,wBAEPvN,KAAK2E,SAASsE,MAAMjJ,KAAK2E,SAASsE,KAAKtH,iBAAiB,SAAU3B,KAAKsN,0BAC3EtN,KAAK2E,SAAShD,iBAAiB,OAAQ3B,KAAKsN,4BAEjD,CACC3P,IAAK,uBACLN,MAAO,WACH,GAAsC,MAAlC2C,KAAK2E,SAAStH,MAAMqN,OAAO,GAAY,CACvC,IAAI8C,EAAUxN,KAAKyN,YAAYzN,KAAK2E,SAAStH,OAExCmQ,GAAWxN,KAAKqG,oBAAoBnE,WAAasL,IAClDxN,KAAK2E,SAAStH,MAAQ,OAInC,CACCM,IAAK,cACLN,MAAO,SAAqBc,GACxB,OAAOA,EAAEuP,QAAQ,MAAO,MAE7B,CACC/P,IAAK,WACLN,MAAO,SAAkBV,GAErB,IAAIgP,EAAI1L,SAAS0N,YAAY,SAC7BhC,EAAEiC,UAAUjR,GAAM,GAAM,GAExBqD,KAAK2E,SAASkJ,cAAclC,KAEjC,CACChO,IAAK,gBACLN,MAAO,WACH2C,KAAKwB,YAAYiE,UAAUqI,OAAO,aAClC9N,KAAKwJ,aAAa/H,aAAa,gBAAiB,QAChDzB,KAAK+N,uBAED/N,KAAK4E,aACL5E,KAAKgO,mBAAmBhO,KAAK4E,YAAY,GACzC5E,KAAKiO,UAAUjO,KAAK4E,YAAY,IAGpC5E,KAAKkO,yBAELlO,KAAK6J,cAAcpE,UAAU7D,IAAI,kBACjC5B,KAAKmO,SAAS,0BAEnB,CACCxQ,IAAK,eACLN,MAAO,SAAsBwL,EAAIsB,EAAWiE,GACpCA,IAAoBvF,EAAGpD,UAAUmG,SAASzB,GAAYtB,EAAGpD,UAAU7D,IAAIuI,IAAsBiE,GAAmBvF,EAAGpD,UAAUmG,SAASzB,IAAYtB,EAAGpD,UAAUqI,OAAO3D,KAE/K,CACCxM,IAAK,uBACLN,MAAO,WACH,IAAIgR,EAASrO,KAIb,GAHIA,KAAKqE,QAAQZ,mBACbzD,KAAKqE,QAAQZ,kBAAkBsF,YAAY/I,KAAK+J,WAE/C/J,KAAKoF,SAAU,CAChB,IAAIkJ,EAAMtO,KAAK2E,SAAS4J,wBAEpBC,EAAYnQ,OAAOoQ,aAAexO,SAASyO,gBAAgBC,UAC3DC,EAAWN,EAAIO,IAAML,EACrBM,EAAiB9O,KAAKwB,YAAYuN,aAElCC,EAAoBJ,EAAW5O,KAAK2E,SAASoK,aAAeD,EAAiBN,EAAYnQ,OAAO4Q,YAChGC,EAAoBN,EAAWE,EAAiBN,EAKpD,GAFAxO,KAAKmP,aAAanP,KAAKwB,YAAa,6BAA8BwN,GAAqBE,GAEnFlP,KAAKqE,QAAQZ,kBAAmB,CAGhC,IAAI2L,GAAYJ,GAAqBE,EAAoB,EAAIlP,KAAK2E,SAASoK,aAE3E/O,KAAK+J,SAASsF,MAAMR,IAAM,GAAGnF,OAAOkF,EAAWQ,EAAU,MACzDpP,KAAK+J,SAASsF,MAAMC,KAAO,GAAG5F,OAAO4E,EAAIgB,KAAOrP,SAASuF,KAAK+J,WAAY,MAE1EvP,KAAKwP,oBAAsB,WACvB,OAAOnB,EAAO9B,kBAElBlO,OAAOsD,iBAAiB,SAAU3B,KAAKwP,yBAIpD,CACC7R,IAAK,sBACLN,MAAO,SAA6BiF,GAEhC,IADA,IAAIuG,EAAKvG,EACFuG,GAAMA,IAAO7I,KAAKwB,cAAgBqH,EAAGpD,UAAUmG,SAAS,iBAC3D/C,EAAKA,EAAGQ,WAGZ,OAAOR,IAAO7I,KAAKwB,YAAc,KAAOqH,IAE7C,CACClL,IAAK,yBACLN,MAAO,WACH,IAAIoS,EAASzP,KAGbA,KAAK0P,4BAA8B,SAAS/D,GAExC,IAAIgE,EAAWF,EAAOG,oBAAoBjE,EAAErJ,QACxCqN,GAAUF,EAAOzB,mBAAmB2B,GAAU,IAEtD3P,KAAKwB,YAAYG,iBAAiB,YAAa3B,KAAK0P,6BAEpD1P,KAAK6P,wBAA0B,SAASlE,GACpC,IAAIgE,EAAWF,EAAOG,oBAAoBjE,EAAErJ,QACxCqN,GAAUF,EAAOK,gBAAgBH,IAEzC3P,KAAKwB,YAAYG,iBAAiB,QAAS3B,KAAK6P,yBAIhD,IAAIE,GAAY,EAChB/P,KAAKgQ,uBAAyB,WACrBD,GAAWN,EAAOlD,iBACvBwD,GAAY,GAEhB9P,SAASyO,gBAAgB/M,iBAAiB,QAAS3B,KAAKgQ,wBAKxD,IAAIC,EAAQ,GACRC,EAAa,KACjBlQ,KAAKmQ,yBAA2B,SAASxE,GAGrCA,EAAEG,iBAEY,YAAVH,EAAEhO,KAA+B,OAAVgO,EAAEhO,KAA0B,cAAVgO,EAAEhO,KAAiC,SAAVgO,EAAEhO,IAAgB8R,EAAOW,iBAAiBzE,EAAEhO,KAAyB,UAAVgO,EAAEhO,IAAiB8R,EAAOY,kBAAsC,WAAV1E,EAAEhO,IAAkB8R,EAAOlD,iBAA2B,uBAAuBlH,KAAKsG,EAAEhO,OAEnQuS,GAAYI,aAAaJ,GAC7BD,GAAStE,EAAEhO,IAAI2J,cACfmI,EAAOc,kBAAkBN,GAEzBC,EAAapD,YAAW,WACpBmD,EAAQ,KACT,OAGXhQ,SAAS0B,iBAAiB,UAAW3B,KAAKmQ,4BAE/C,CACCxS,IAAK,mBACLN,MAAO,SAA0BM,GAC7B,IAAI6S,EAAe,YAAR7S,GAA6B,OAARA,EAAeqC,KAAK6E,gBAAgB4L,uBAAyBzQ,KAAK6E,gBAAgB6L,mBAC9GF,IAEIA,EAAK/K,UAAUmG,SAAS,kBACxB4E,EAAe,YAAR7S,GAA6B,OAARA,EAAe6S,EAAKC,uBAAyBD,EAAKE,oBAElF1Q,KAAKgO,mBAAmBwC,GAAM,MAGvC,CACC7S,IAAK,kBACLN,MAAO,WACC2C,KAAK6E,iBAAiB7E,KAAK8P,gBAAgB9P,KAAK6E,mBAEzD,CACClH,IAAK,oBACLN,MAAO,SAA2B4S,GAC9B,IAAK,IAAI7T,EAAI,EAAGA,EAAI4D,KAAKqB,UAAUf,OAAQlE,IACvC,GAAI4D,KAAK2Q,YAAY3Q,KAAKqB,UAAUjF,GAAGO,KAAMsT,GAAQ,CACjD,IAAIN,EAAW3P,KAAKwB,YAAYtB,cAAc,QAAQwJ,OAAO1J,KAAK8C,GAAI,WAAW4G,OAAO1J,KAAKqB,UAAUjF,GAAG6F,OAE1GjC,KAAKgO,mBAAmB2B,GAAU,GAClC3P,KAAKiO,UAAU0B,GAAU,GACzB,SAIb,CACChS,IAAK,cACLN,MAAO,SAAqBsK,EAAGC,GAC3B,OAAOD,EAAEY,OAAO,EAAGX,EAAEtH,QAAQgH,gBAAkBM,IAEpD,CACCjK,IAAK,uBACLN,MAAO,SAA8BuT,GACjC,IAAIzD,EAASyD,EACb,GAAI5Q,KAAKqE,QAAQX,iBAAmBrF,OAAOiB,mBAAqBU,KAAKqG,oBAAqB,CACtF,IAAIwK,GAAe7Q,KAAKqE,QAAQvD,mBAAqBd,KAAKqE,QAAQT,cAAqC,MAArBuJ,EAAOzC,OAAO,IAC5FoG,EAAwBxR,kBAAkBE,aAAcuR,EAAWD,EAAsBC,SAAUC,EAAgBF,EAAsBE,cACzIC,EAASJ,EAAcE,EAAWC,EACtC7D,EAAS7N,kBAAkB4R,aAAa/D,EAAQnN,KAAKqG,oBAAoBpE,KAAMgP,GAEnF9D,EAASnN,KAAKmR,iBAAiBhE,GAC/BnN,KAAK2E,SAAStH,MAAQ8P,IAE3B,CACCxP,IAAK,wBACLN,MAAO,SAA+BuT,GAMlC,IAAIzD,EAASyD,EACThH,EAAmB5J,KAAKqG,oBAAoBnE,SAC5CkP,EAA8B,MAArBxH,EACTuD,GAAUnN,KAAKqE,QAAQT,cAAgBwN,GAA+B,MAArBjE,EAAOzC,OAAO,KACtC,MAArByC,EAAOzC,OAAO,KAAYyC,EAAS,IAAIzD,OAAOyD,IAClDA,EAAS,IAAIzD,OAAOyD,IAGpBnN,KAAKqE,QAAQvD,kBAAoB8I,GAAyC,MAArBuD,EAAOzC,OAAO,KACnEyC,EAAS,IAAIzD,OAAOE,GAAkBF,OAAOyD,IAGjD,IAAIjL,EAAWlC,KAAK2K,aAAawC,GAAQ,GACrCK,EAAUxN,KAAKyN,YAAYN,GAC3BvO,EAAc,KAClB,GAAIsD,EAAU,CACV,IAAIgF,EAAelH,KAAKkH,aAAalH,KAAKyN,YAAYvL,IAKlDmP,GAA2E,IAAzDnK,EAAaM,QAAQxH,KAAKqG,oBAAoBpE,OAAgBuL,EAAQlN,QAAU4B,EAAS5B,OAAS,EAMxH,KALkD,MAArBsJ,GAA4B5J,KAAK6K,kBAAkB2C,IAKhD6D,GAG5B,IAAK,IAAIlJ,EAAI,EAAGA,EAAIjB,EAAa5G,OAAQ6H,IACrC,GAAIjB,EAAaiB,GAAI,CACjBvJ,EAAcsI,EAAaiB,GAC3B,WAIgB,MAArBgF,EAAOzC,OAAO,IAAc8C,EAAQlN,OAI3C1B,EAAc,GACNuO,GAAqB,MAAXA,IAElBvO,EAAcoB,KAAKU,gBAEvB,OAAoB,OAAhB9B,GACOoB,KAAKgL,SAASpM,KAI9B,CACCjB,IAAK,oBACLN,MAAO,SAA2B8P,GAC9B,IAAIK,EAAUxN,KAAKyN,YAAYN,GAC/B,GAA0B,MAAtBK,EAAQ9C,OAAO,GAAY,CAC3B,IAAItC,EAAWoF,EAAQjF,OAAO,EAAG,GACjC,OAAoD,IAA7CzE,EAAsB0D,QAAQY,GAEzC,OAAO,IAEZ,CACCzK,IAAK,qBACLN,MAAO,SAA4BsS,EAAU2B,GACzC,IAAIC,EAAWvR,KAAK6E,gBAChB0M,GAAUA,EAAS9L,UAAUqI,OAAO,kBACxC9N,KAAK6E,gBAAkB8K,EACvB3P,KAAK6E,gBAAgBY,UAAU7D,IAAI,kBAC/B0P,GAAatR,KAAK6E,gBAAgBgH,UAE3C,CACClO,IAAK,kBACLN,MAAO,SAAyBuB,EAAa4S,EAA2BC,GAEpE,IADA,IAAIjQ,EAAcgQ,EAA4BxP,EAAehC,KAAKqB,UACzDjF,EAAI,EAAGA,EAAIoF,EAAYlB,OAAQlE,IACpC,GAAIoF,EAAYpF,GAAG6F,OAASrD,EACxB,OAAO4C,EAAYpF,GAG3B,GAAIqV,EACA,OAAO,KAEX,MAAM,IAAIC,MAAM,wBAAwBhI,OAAO9K,EAAa,QAEjE,CACCjB,IAAK,WACLN,MAAO,SAAkBuB,GACrB,IAAI+S,EAAc3R,KAAKqG,oBAAoBpE,KAAOjC,KAAKqG,oBAAsB,GAE7ErG,KAAKqG,oBAAsBzH,EAAcoB,KAAKyI,gBAAgB7J,GAAa,GAAO,GAAS,GAEvFoB,KAAKqG,oBAAoBpE,OACzBjC,KAAKU,eAAiBV,KAAKqG,oBAAoBpE,MAEnDjC,KAAK2J,kBAAkBlI,aAAa,QAAS,kBAAkBiI,OAAO9K,IAEtE,IAAIgT,EAAQhT,EAAc,GAAG8K,OAAO1J,KAAKqG,oBAAoB1J,KAAM,OAAO+M,OAAO1J,KAAKqG,oBAAoBnE,UAAY,UAEtH,GADAlC,KAAKwJ,aAAa/H,aAAa,QAASmQ,GACpC5R,KAAKqE,QAAQvD,iBAAkB,CAC/B,IAAIoB,EAAWlC,KAAKqG,oBAAoBnE,SAAW,IAAIwH,OAAO1J,KAAKqG,oBAAoBnE,UAAY,GACnGlC,KAAK4J,iBAAiBiI,UAAY3P,EAElC,IAAI4P,EAAoB9R,KAAKwJ,aAAauI,aAAe/R,KAAKgS,8BAE9DhS,KAAK2E,SAAS0K,MAAM4C,YAAc,GAAGvI,OAAOoI,EAAoB,EAAG,MAKvE,GAFA9R,KAAKkS,qBAEDlS,KAAKqE,QAAQjB,cAAe,CAC5B,IAAImO,EAAWvR,KAAK4E,WAKpB,GAJI2M,IACAA,EAAS9L,UAAUqI,OAAO,eAC1ByD,EAAS9P,aAAa,gBAAiB,UAEvC7C,EAAa,CAEb,IAAIuT,EAAWnS,KAAKwB,YAAYtB,cAAc,QAAQwJ,OAAO1J,KAAK8C,GAAI,WAAW4G,OAAO9K,EAAa,gBAAkBoB,KAAKwB,YAAYtB,cAAc,QAAQwJ,OAAO1J,KAAK8C,GAAI,WAAW4G,OAAO9K,IAChMuT,EAAS1Q,aAAa,gBAAiB,QACvC0Q,EAAS1M,UAAU7D,IAAI,eACvB5B,KAAK4E,WAAauN,EAClBnS,KAAKwJ,aAAa/H,aAAa,wBAAyB0Q,EAASpP,aAAa,QAItF,OAAO4O,EAAY1P,OAASrD,IAEjC,CACCjB,IAAK,8BACLN,MAAO,WAGH,IAAI+U,EAAiBpS,KAAK2E,SAAS0E,WAAWgJ,YAC9CD,EAAe/C,MAAMiD,WAAa,SAClCrS,SAASuF,KAAKuD,YAAYqJ,GAC1B,IAAIG,EAAsBvS,KAAKuJ,eAAe8I,YAC9CD,EAAerJ,YAAYwJ,GAC3B,IAAIC,EAAoBxS,KAAKwJ,aAAa6I,WAAU,GACpDE,EAAoBxJ,YAAYyJ,GAChC,IAAIC,EAAQD,EAAkBT,YAE9B,OADAK,EAAe/I,WAAWqJ,YAAYN,GAC/BK,IAEZ,CACC9U,IAAK,qBACLN,MAAO,WACH,IAAIsV,EAAwD,eAAjC3S,KAAKqE,QAAQf,kBAAqCtD,KAAK+E,uBAA0D,WAAjC/E,KAAKqE,QAAQf,gBACxH,GAAIjF,OAAOiB,mBAAqBqT,EAAsB,CAClD,IAAIC,EAAatT,kBAAkBsT,WAAW5S,KAAKqE,QAAQR,uBACvDgP,EAAc7S,KAAKqG,oBAAoBpE,KAAO3C,kBAAkBwT,iBAAiB9S,KAAKqG,oBAAoBpE,KAAMjC,KAAKqE,QAAQT,aAAcgP,GAAc,GAC7JC,EAAc7S,KAAKmR,iBAAiB0B,GACU,mBAAnC7S,KAAKqE,QAAQb,oBACpBqP,EAAc7S,KAAKqE,QAAQb,kBAAkBqP,EAAa7S,KAAKqG,sBAEnErG,KAAK2E,SAASlD,aAAa,cAAeoR,MAGnD,CACClV,IAAK,kBACLN,MAAO,SAAyBsS,GAE5B,IAAIoD,EAAc/S,KAAKgL,SAAS2E,EAAS5M,aAAa,sBACtD/C,KAAKuM,iBACLvM,KAAKgT,gBAAgBrD,EAAS5M,aAAa,mBAAmB,GAE9D/C,KAAK2E,SAASkH,QAGd,IAAIoH,EAAMjT,KAAK2E,SAAStH,MAAMiD,OAC9BN,KAAK2E,SAASuO,kBAAkBD,EAAKA,GACjCF,GACA/S,KAAKiN,0BAGd,CACCtP,IAAK,iBACLN,MAAO,WACH2C,KAAKwB,YAAYiE,UAAU7D,IAAI,aAC/B5B,KAAKwJ,aAAa/H,aAAa,gBAAiB,SAEhDzB,KAAK6J,cAAcpE,UAAUqI,OAAO,kBAEpC7N,SAASkT,oBAAoB,UAAWnT,KAAKmQ,0BAC7ClQ,SAASyO,gBAAgByE,oBAAoB,QAASnT,KAAKgQ,wBAC3DhQ,KAAKwB,YAAY2R,oBAAoB,YAAanT,KAAK0P,6BACvD1P,KAAKwB,YAAY2R,oBAAoB,QAASnT,KAAK6P,yBAE/C7P,KAAKqE,QAAQZ,oBACRzD,KAAKoF,UAAU/G,OAAO8U,oBAAoB,SAAUnT,KAAKwP,qBAC1DxP,KAAK+J,SAASV,YAAYrJ,KAAK+J,SAASV,WAAWqJ,YAAY1S,KAAK+J,WAE5E/J,KAAKmO,SAAS,2BAEnB,CACCxQ,IAAK,YACLN,MAAO,SAAmB+V,EAASC,GAC/B,IAAIzK,EAAY5I,KAAKwB,YAEjBgN,EAAYnQ,OAAOoQ,aAAexO,SAASyO,gBAAgBC,UAC3D2E,EAAkB1K,EAAUmG,aAC5BwE,EAAe3K,EAAU2F,wBAAwBM,IAAML,EACvDgF,EAAkBD,EAAeD,EACjCG,EAAgBL,EAAQrE,aACxB2E,EAAaN,EAAQ7E,wBAAwBM,IAAML,EACnDmF,EAAgBD,EAAaD,EAC7BG,EAAeF,EAAaH,EAAe3K,EAAU+F,UACrDkF,EAAeP,EAAkB,EAAIG,EAAgB,EACzD,GAAIC,EAAaH,EAETF,IAAQO,GAAgBC,GAC5BjL,EAAU+F,UAAYiF,OACnB,GAAID,EAAgBH,EAAiB,CAEpCH,IAAQO,GAAgBC,GAC5B,IAAIC,EAAmBR,EAAkBG,EACzC7K,EAAU+F,UAAYiF,EAAeE,KAG9C,CACCnW,IAAK,kBACLN,MAAO,SAAyB0W,EAAiBC,GAC7C,IAGIC,EAHAC,EAAWlU,KAAK2E,SAAStH,MAEzB8W,EAAc,IAAIzK,OAAOqK,GAE7B,GAA2B,MAAvBG,EAASxJ,OAAO,GAAY,CAE5B,IAAI0J,EAAepU,KAAK2K,aAAauJ,GAGjCD,EAFAG,EAEYF,EAASxG,QAAQ0G,EAAcD,GAI/BA,MAEb,IAAInU,KAAKqE,QAAQT,cAAgB5D,KAAKqE,QAAQvD,iBAEjD,OAGA,GAAIoT,EAEAD,EAAYE,EAAcD,MACvB,KAAIF,GAAwBhU,KAAKqE,QAAQhB,iBAK5C,OAFA4Q,EAAYE,GAKpBnU,KAAK2E,SAAStH,MAAQ4W,IAE3B,CACCtW,IAAK,eACLN,MAAO,SAAsB8P,EAAQkH,GACjC,IAAInS,EAAW,GAEf,GAAyB,MAArBiL,EAAOzC,OAAO,GAGd,IAFA,IAAI4J,EAAe,GAEVlY,EAAI,EAAGA,EAAI+Q,EAAO7M,OAAQlE,IAAK,CACpC,IAAIK,EAAI0Q,EAAOzC,OAAOtO,GAEtB,IAAKmY,MAAMC,SAAS/X,EAAG,KAAM,CAGzB,GAFA6X,GAAgB7X,EAEZ4X,EACIrU,KAAKkH,aAAaoN,KAElBpS,EAAWiL,EAAO5E,OAAO,EAAGnM,EAAI,SAGpC,GAAI4D,KAAK8H,UAAUwM,GAAe,CAC9BpS,EAAWiL,EAAO5E,OAAO,EAAGnM,EAAI,GAEhC,MAIR,GAAIkY,EAAahU,SAAWN,KAAKiH,kBAC7B,OAKhB,OAAO/E,IAEZ,CACCvE,IAAK,iBACLN,MAAO,WACH,IAAImD,EAAMR,KAAK2E,SAAStH,MAAMoX,OAC1BvS,EAAWlC,KAAKqG,oBAAoBnE,SAEpCwS,EAAa1U,KAAKyN,YAAYjN,GAOlC,OANIR,KAAKqE,QAAQvD,kBAAsC,MAAlBN,EAAIkK,OAAO,IAAcxI,GAAYwS,EAE7D,IAAIhL,OAAOxH,GAEX,IAEG1B,IAErB,CACC7C,IAAK,mBACLN,MAAO,SAA0BuT,GAC7B,IAAIzD,EAASyD,EACb,GAAI5Q,KAAKqE,QAAQvD,iBAAkB,CAC/B,IAAIoB,EAAWlC,KAAK2K,aAAawC,GAEjC,GAAIjL,EAAU,CAOV,IAAIyS,EAAoC,MAA5BxH,GALZjL,EAAW,IAAIwH,OAAO1J,KAAKqG,oBAAoBnE,WAKnB5B,SAA+C,MAA5B6M,EAAOjL,EAAS5B,QAAkB4B,EAAS5B,OAAS,EAAI4B,EAAS5B,OAChH6M,EAASA,EAAO5E,OAAOoM,IAG/B,OAAO3U,KAAK4U,KAAKzH,KAEtB,CACCxP,IAAK,wBACLN,MAAO,WACH2C,KAAKmO,SAAS,mBAEnB,CACCxQ,IAAK,oBACLN,MAAO,WACiC,SAAhC2C,KAAKqE,QAAQ5D,iBAGbT,KAAKU,eAAiBrC,OAAOsE,oBAAoBgK,YAE5C3M,KAAK2E,SAAStH,OACf2C,KAAK6U,WAAW7U,KAAKU,gBAEzBV,KAAK8F,+BAGd,CACCnI,IAAK,cACLN,MAAO,WAECgB,OAAOiB,oBAEHU,KAAK2E,SAAStH,OACd2C,KAAKiL,qBAAqBjL,KAAK2E,SAAStH,OAE5C2C,KAAKkS,sBAETlS,KAAKiG,8BAEV,CACCtI,IAAK,UACLN,MAAO,WACH,IAAI4L,EAAOjJ,KAAK2E,SAASsE,KACzB,GAAIjJ,KAAKqE,QAAQjB,cAAe,CAE5BpD,KAAKuM,iBACLvM,KAAKwJ,aAAa2J,oBAAoB,QAASnT,KAAKiM,0BACpDjM,KAAKuJ,eAAe4J,oBAAoB,UAAWnT,KAAKqM,8BAExD,IAAIN,EAAQ/L,KAAKgM,mBACbD,GAAOA,EAAMoH,oBAAoB,QAASnT,KAAK0L,mBAGnD1L,KAAKe,aAAekI,GAAMA,EAAKkK,oBAAoB,SAAUnT,KAAKuL,0BAElEvL,KAAKqE,QAAQhB,mBACT4F,GAAMA,EAAKkK,oBAAoB,SAAUnT,KAAKsN,0BAClDtN,KAAK2E,SAASwO,oBAAoB,OAAQnT,KAAKsN,2BAGnDtN,KAAK2E,SAASwO,oBAAoB,QAASnT,KAAKgN,mBAChDhN,KAAK2E,SAASwO,oBAAoB,MAAOnT,KAAKkN,uBAC9ClN,KAAK2E,SAASwO,oBAAoB,QAASnT,KAAKkN,uBAEhDlN,KAAK2E,SAASmQ,gBAAgB,0BAE9B,IAAI3L,EAAUnJ,KAAK2E,SAAS0E,WAC5BF,EAAQE,WAAWC,aAAatJ,KAAK2E,SAAUwE,GAC/CA,EAAQE,WAAWqJ,YAAYvJ,UACxB9K,OAAOsE,oBAAoBK,UAAUhD,KAAK8C,MAEtD,CACCnF,IAAK,eACLN,MAAO,WACH,OAAIgB,OAAOiB,kBACAA,kBAAkByV,aAAa/U,KAAKgV,iBAAkBhV,KAAKqG,oBAAoBpE,MAEnF,KAEZ,CACCtE,IAAK,YACLN,MAAO,SAAmB4T,GACtB,GAAI5S,OAAOiB,kBAAmB,CAC1B,IAAI2C,EAAOjC,KAAKqG,oBAAoBpE,KACpC,OAAO3C,kBAAkB4R,aAAalR,KAAKgV,iBAAkB/S,EAAMgP,GAEvE,MAAO,KAEZ,CACCtT,IAAK,gBACLN,MAAO,WACH,OAAIgB,OAAOiB,kBACAA,kBAAkB2V,cAAcjV,KAAKgV,iBAAkBhV,KAAKqG,oBAAoBpE,OAEnF,KAEb,CACCtE,IAAK,yBACLN,MAAO,WACH,OAAO2C,KAAKqG,sBAEjB,CACC1I,IAAK,qBACLN,MAAO,WACH,GAAIgB,OAAOiB,kBAAmB,CAC1B,IAAI2C,EAAOjC,KAAKqG,oBAAoBpE,KACpC,OAAO3C,kBAAkB4V,mBAAmBlV,KAAKgV,iBAAkB/S,GAEvE,OAAQ,KAEb,CACCtE,IAAK,gBACLN,MAAO,WACH,IAAImD,EAAMR,KAAKgV,iBAAiBP,OAC5B7V,EAAcoB,KAAKqE,QAAQT,aAAe5D,KAAKqG,oBAAoBpE,KAAO,GAC9E,OAAO5D,OAAOiB,kBAAoBA,kBAAkB6V,cAAc3U,EAAK5B,GAAe,OAE3F,CACCjB,IAAK,aACLN,MAAO,SAAoB+X,GACvB,IAAIxW,EAAcwW,EAAoB9N,cAEjCtH,KAAK2J,kBAAkBlE,UAAUmG,SAAS,QAAQlC,OAAO9K,MAC1DoB,KAAKgL,SAASpM,GACdoB,KAAKgT,gBAAgBhT,KAAKqG,oBAAoBnE,UAAU,GACxDlC,KAAKiN,2BAGd,CACCtP,IAAK,YACLN,MAAO,SAAmB8P,GAGtB,IAAI4F,EAAc/S,KAAK+K,sBAAsBoC,GAC7CnN,KAAKiL,qBAAqBkC,GACtB4F,GACA/S,KAAKiN,0BAGd,CACCtP,IAAK,2BACLN,MAAO,SAAkC6M,GACrClK,KAAKqE,QAAQR,sBAAwBqG,EACrClK,KAAKkS,0BArtCG7P,EAAkBmC,EAAYxG,UAAWiH,GACrDC,GAAa7C,EAAkBmC,EAAaU,GAutCzCd,EA7oCX,GAmpCAzB,EAAoB0S,eAAiB,WACjC,OAAOrT,GAGX,IAAIsT,EAAe,SAAsBC,EAAMC,EAAeC,GAE1D,IAAIC,EAASzV,SAAS6I,cAAc,UACpC4M,EAAOC,OAAS,WACZzR,EAAgB,eACZsR,GAAeA,KAEvBE,EAAOE,QAAU,WACb1R,EAAgB,4BACZuR,GAAeA,KAEvBC,EAAOvL,UAAY,iBACnBuL,EAAOG,OAAQ,EACfH,EAAOI,IAAMP,EACbtV,SAASuF,KAAKuD,YAAY2M,IA0B9B,OAvBA/S,EAAoB8J,UAAY,SAAS8I,GAKrC,IAAKlX,OAAOiB,oBAAsBjB,OAAOsE,oBAAoBoT,0BAA2B,CAIpF,GAFA1X,OAAOsE,oBAAoBoT,2BAA4B,EAEhC,oBAAZrQ,QACP,OAAO,IAAIA,SAAQ,SAASE,EAASC,GACjC,OAAOyP,EAAaC,EAAM3P,EAASC,MAG3CyP,EAAaC,GAEjB,OAAO,MAGX5S,EAAoBQ,SAAWA,EAE/BR,EAAoBqT,QAAU,UAEvB,SAASnT,EAAOwB,GACnB,IAAIjF,EAAM,IAAIgF,EAAIvB,EAAOwB,GAIzB,OAHAjF,EAAI6W,QACJpT,EAAMpB,aAAa,yBAA0BrC,EAAI0D,IACjDzE,OAAOsE,oBAAoBK,UAAU5D,EAAI0D,IAAM1D,EACxCA,GA1zCR,IAH2BjD,EAAOD,QAASC,EAAOD,QAAU6F,IAAgB1D,OAAO6X,aAAenU","file":"gp-advanced-phone-field.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * Exposing intl-tel-input as a component\n */\nmodule.exports = require(\"./build/js/intlTelInput\");\n","import intlTelInput from 'intl-tel-input';\n\nconst $ = window.jQuery!;\n\ninterface GPAdvancedPhoneFieldArgs {\n\tfieldId: number;\n\tformId: number;\n\tdefaultCountry?: string;\n\tpreferredCountries?: string[];\n\tcountriesAction?: 'all' | 'include' | 'exclude';\n\tcountries?: string[];\n}\n\ninterface GPAdvancedPhoneField extends GPAdvancedPhoneFieldArgs {}\n\nclass GPAdvancedPhoneField implements GPAdvancedPhoneField {\n\tpublic $telInput: HTMLInputElement;\n\n\tpublic $hiddenInput?: HTMLInputElement;\n\n\tpublic iti!: intlTelInput.Plugin;\n\n\tconstructor(args: GPAdvancedPhoneFieldArgs) {\n\t\tObject.assign(this, args);\n\n\t\tthis.$telInput = document.querySelector<HTMLInputElement>(\n\t\t\t`#input_${this.formId}_${this.fieldId}`\n\t\t)!;\n\n\t\t// Do not double-init\n\t\tif ($(this.$telInput).closest('.iti').length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.$telInput) {\n\t\t\treturn;\n\t\t}\n\n\t\t/* Save value POSTed to input, so we can preserve it when navigating multi-page forms. */\n\t\tconst postedValue = $(this.$telInput).val();\n\n\t\tthis.disableMask();\n\n\t\tconst initialCountry = this.defaultCountry ?? 'auto';\n\n\t\tconst intlTelInputOptions: intlTelInput.Options = {\n\t\t\tinitialCountry,\n\t\t\tgeoIpLookup:\n\t\t\t\tinitialCountry === 'auto' ? this.geoIpLookup : undefined,\n\t\t\tpreferredCountries: this.preferredCountries ?? [],\n\t\t\tseparateDialCode: true,\n\t\t\thiddenInput: 'input_' + this.fieldId, // Generate a hidden input that contains the full number including dialing code.\n\t\t\tutilsScript:\n\t\t\t\twindow.GPAPF.pluginUrl +\n\t\t\t\t'/js/built/gpapf-intl-tel-input-utils.js',\n\t\t};\n\n\t\tif (this.countriesAction === 'exclude') {\n\t\t\tintlTelInputOptions.excludeCountries =\n\t\t\t\tthis.countriesAction === 'exclude' ? this.countries : undefined;\n\t\t} else if (this.countriesAction === 'include') {\n\t\t\tintlTelInputOptions.onlyCountries =\n\t\t\t\tthis.countriesAction === 'include' ? this.countries : undefined;\n\t\t}\n\n\t\t// Change ID and name for current phone field so it conflicts less with hidden field.\n\t\t$(this.$telInput)\n\t\t\t.attr('id', `input_${this.formId}_${this.fieldId}_raw`)\n\t\t\t.attr('name', ``);\n\n\t\t// @todo add filter\n\t\tthis.iti = intlTelInput(this.$telInput, intlTelInputOptions);\n\n\t\t// @todo Explore adding RTL support for the Country List. For now, force LTR to avoid RTL weirdness.\n\t\t// @ts-ignore\n\t\tthis.iti.countryList.setAttribute('dir', 'ltr');\n\n\t\t// Add an ID to the hidden field.\n\t\tthis.$hiddenInput = $(this.$telInput).siblings('[type=\"hidden\"]')[0];\n\n\t\t$(this.$hiddenInput).attr('id', `input_${this.formId}_${this.fieldId}`);\n\n\t\tthis.$telInput.addEventListener('keyup', this.formatInputVal);\n\t\tthis.$telInput.addEventListener('input', this.formatInputVal);\n\n\t\tthis.$telInput.addEventListener('keyup', this.updateHiddenInputValue);\n\t\tthis.$telInput.addEventListener('input', this.updateHiddenInputValue);\n\t\tthis.$telInput.addEventListener(\n\t\t\t'countrychange',\n\t\t\tthis.updateHiddenInputValue\n\t\t);\n\n\t\t/* Parent merge tag replacement occurs after Advanced Phone Field has initialized on the frontend. */\n\t\t$(this.$hiddenInput)\n\t\t\t.add(this.$telInput)\n\t\t\t.on('gpnfUpdatedFromParentMergeTag', this.formatInputVal);\n\n\t\t/*\n\t\t * Immediately copy value to hidden input to prevent value from being lost on multi-page forms.\n\t\t * We don't use updateHiddenInputValue() as it requires the phone utils and may not be ready yet.\n\t\t */\n\t\tif (postedValue) {\n\t\t\t$(this.$hiddenInput).val(postedValue);\n\t\t}\n\t}\n\n\tgeoIpLookup = (callback: (countryCode: string) => void): void => {\n\t\tjQuery\n\t\t\t.get('https://ipinfo.io', function() {}, 'json')\n\t\t\t.always(function(resp) {\n\t\t\t\tconst countryCode = resp && resp.country ? resp.country : 'us';\n\t\t\t\tcallback(countryCode);\n\t\t\t});\n\t};\n\n\t/**\n\t * If for some reason the Phone input is masked and not international, remove the mask.\n\t */\n\tdisableMask = () => {\n\t\t$(this.$telInput).trigger('unmask');\n\t};\n\n\tformatInputVal = () => {\n\t\tconst currentNumber = this.getFormattedNumber();\n\n\t\tif (currentNumber) {\n\t\t\t// sometimes the currentText is an object\n\t\t\tthis.iti.setNumber(currentNumber);\n\t\t}\n\t};\n\n\tgetFormattedNumber = (): string | undefined => {\n\t\tif (typeof intlTelInputUtils === 'undefined') {\n\t\t\t// eslint-disable-next-line no-console\n\t\t\tconsole.debug('intlTelInputUtils is not loaded.');\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.iti.getNumber(intlTelInputUtils.numberFormat.E164);\n\t};\n\n\t/**\n\t * Update hidden input value as it's normally only done on submission. This allows access by plugins such as\n\t * Copy Cat and Populate Anything.\n\t */\n\tupdateHiddenInputValue = (): void => {\n\t\tif (!this.$hiddenInput) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst formattedNumber = this.getFormattedNumber();\n\n\t\tif (formattedNumber) {\n\t\t\tthis.$hiddenInput.value = formattedNumber;\n\t\t\t$(this.$hiddenInput).trigger('change');\n\t\t}\n\t};\n}\n\nwindow.GPAdvancedPhoneField = GPAdvancedPhoneField;\n","/*\n * International Telephone Input v17.0.13\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// wrap in UMD\n(function(factory) {\n    if (typeof module === \"object\" && module.exports) module.exports = factory(); else window.intlTelInput = factory();\n})(function(undefined) {\n    \"use strict\";\n    return function() {\n        // Array of country objects for the flag dropdown.\n        // Here is the criteria for the plugin to support a given country/territory\n        // - It has an iso2 code: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\n        // - It has it's own country calling code (it is not a sub-region of another country): https://en.wikipedia.org/wiki/List_of_country_calling_codes\n        // - It has a flag in the region-flags project: https://github.com/behdad/region-flags/tree/gh-pages/png\n        // - It is supported by libphonenumber (it must be listed on this page): https://github.com/googlei18n/libphonenumber/blob/master/resources/ShortNumberMetadata.xml\n        // Each country array has the following information:\n        // [\n        //    Country name,\n        //    iso2 code,\n        //    International dial code,\n        //    Order (if >1 country with same dial code),\n        //    Area codes\n        // ]\n        var allCountries = [ [ \"Afghanistan (‫افغانستان‬‎)\", \"af\", \"93\" ], [ \"Albania (Shqipëri)\", \"al\", \"355\" ], [ \"Algeria (‫الجزائر‬‎)\", \"dz\", \"213\" ], [ \"American Samoa\", \"as\", \"1\", 5, [ \"684\" ] ], [ \"Andorra\", \"ad\", \"376\" ], [ \"Angola\", \"ao\", \"244\" ], [ \"Anguilla\", \"ai\", \"1\", 6, [ \"264\" ] ], [ \"Antigua and Barbuda\", \"ag\", \"1\", 7, [ \"268\" ] ], [ \"Argentina\", \"ar\", \"54\" ], [ \"Armenia (Հայաստան)\", \"am\", \"374\" ], [ \"Aruba\", \"aw\", \"297\" ], [ \"Ascension Island\", \"ac\", \"247\" ], [ \"Australia\", \"au\", \"61\", 0 ], [ \"Austria (Österreich)\", \"at\", \"43\" ], [ \"Azerbaijan (Azərbaycan)\", \"az\", \"994\" ], [ \"Bahamas\", \"bs\", \"1\", 8, [ \"242\" ] ], [ \"Bahrain (‫البحرين‬‎)\", \"bh\", \"973\" ], [ \"Bangladesh (বাংলাদেশ)\", \"bd\", \"880\" ], [ \"Barbados\", \"bb\", \"1\", 9, [ \"246\" ] ], [ \"Belarus (Беларусь)\", \"by\", \"375\" ], [ \"Belgium (België)\", \"be\", \"32\" ], [ \"Belize\", \"bz\", \"501\" ], [ \"Benin (Bénin)\", \"bj\", \"229\" ], [ \"Bermuda\", \"bm\", \"1\", 10, [ \"441\" ] ], [ \"Bhutan (འབྲུག)\", \"bt\", \"975\" ], [ \"Bolivia\", \"bo\", \"591\" ], [ \"Bosnia and Herzegovina (Босна и Херцеговина)\", \"ba\", \"387\" ], [ \"Botswana\", \"bw\", \"267\" ], [ \"Brazil (Brasil)\", \"br\", \"55\" ], [ \"British Indian Ocean Territory\", \"io\", \"246\" ], [ \"British Virgin Islands\", \"vg\", \"1\", 11, [ \"284\" ] ], [ \"Brunei\", \"bn\", \"673\" ], [ \"Bulgaria (България)\", \"bg\", \"359\" ], [ \"Burkina Faso\", \"bf\", \"226\" ], [ \"Burundi (Uburundi)\", \"bi\", \"257\" ], [ \"Cambodia (កម្ពុជា)\", \"kh\", \"855\" ], [ \"Cameroon (Cameroun)\", \"cm\", \"237\" ], [ \"Canada\", \"ca\", \"1\", 1, [ \"204\", \"226\", \"236\", \"249\", \"250\", \"289\", \"306\", \"343\", \"365\", \"387\", \"403\", \"416\", \"418\", \"431\", \"437\", \"438\", \"450\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"705\", \"709\", \"742\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"902\", \"905\" ] ], [ \"Cape Verde (Kabu Verdi)\", \"cv\", \"238\" ], [ \"Caribbean Netherlands\", \"bq\", \"599\", 1, [ \"3\", \"4\", \"7\" ] ], [ \"Cayman Islands\", \"ky\", \"1\", 12, [ \"345\" ] ], [ \"Central African Republic (République centrafricaine)\", \"cf\", \"236\" ], [ \"Chad (Tchad)\", \"td\", \"235\" ], [ \"Chile\", \"cl\", \"56\" ], [ \"China (中国)\", \"cn\", \"86\" ], [ \"Christmas Island\", \"cx\", \"61\", 2, [ \"89164\" ] ], [ \"Cocos (Keeling) Islands\", \"cc\", \"61\", 1, [ \"89162\" ] ], [ \"Colombia\", \"co\", \"57\" ], [ \"Comoros (‫جزر القمر‬‎)\", \"km\", \"269\" ], [ \"Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)\", \"cd\", \"243\" ], [ \"Congo (Republic) (Congo-Brazzaville)\", \"cg\", \"242\" ], [ \"Cook Islands\", \"ck\", \"682\" ], [ \"Costa Rica\", \"cr\", \"506\" ], [ \"Côte d’Ivoire\", \"ci\", \"225\" ], [ \"Croatia (Hrvatska)\", \"hr\", \"385\" ], [ \"Cuba\", \"cu\", \"53\" ], [ \"Curaçao\", \"cw\", \"599\", 0 ], [ \"Cyprus (Κύπρος)\", \"cy\", \"357\" ], [ \"Czech Republic (Česká republika)\", \"cz\", \"420\" ], [ \"Denmark (Danmark)\", \"dk\", \"45\" ], [ \"Djibouti\", \"dj\", \"253\" ], [ \"Dominica\", \"dm\", \"1\", 13, [ \"767\" ] ], [ \"Dominican Republic (República Dominicana)\", \"do\", \"1\", 2, [ \"809\", \"829\", \"849\" ] ], [ \"Ecuador\", \"ec\", \"593\" ], [ \"Egypt (‫مصر‬‎)\", \"eg\", \"20\" ], [ \"El Salvador\", \"sv\", \"503\" ], [ \"Equatorial Guinea (Guinea Ecuatorial)\", \"gq\", \"240\" ], [ \"Eritrea\", \"er\", \"291\" ], [ \"Estonia (Eesti)\", \"ee\", \"372\" ], [ \"Eswatini\", \"sz\", \"268\" ], [ \"Ethiopia\", \"et\", \"251\" ], [ \"Falkland Islands (Islas Malvinas)\", \"fk\", \"500\" ], [ \"Faroe Islands (Føroyar)\", \"fo\", \"298\" ], [ \"Fiji\", \"fj\", \"679\" ], [ \"Finland (Suomi)\", \"fi\", \"358\", 0 ], [ \"France\", \"fr\", \"33\" ], [ \"French Guiana (Guyane française)\", \"gf\", \"594\" ], [ \"French Polynesia (Polynésie française)\", \"pf\", \"689\" ], [ \"Gabon\", \"ga\", \"241\" ], [ \"Gambia\", \"gm\", \"220\" ], [ \"Georgia (საქართველო)\", \"ge\", \"995\" ], [ \"Germany (Deutschland)\", \"de\", \"49\" ], [ \"Ghana (Gaana)\", \"gh\", \"233\" ], [ \"Gibraltar\", \"gi\", \"350\" ], [ \"Greece (Ελλάδα)\", \"gr\", \"30\" ], [ \"Greenland (Kalaallit Nunaat)\", \"gl\", \"299\" ], [ \"Grenada\", \"gd\", \"1\", 14, [ \"473\" ] ], [ \"Guadeloupe\", \"gp\", \"590\", 0 ], [ \"Guam\", \"gu\", \"1\", 15, [ \"671\" ] ], [ \"Guatemala\", \"gt\", \"502\" ], [ \"Guernsey\", \"gg\", \"44\", 1, [ \"1481\", \"7781\", \"7839\", \"7911\" ] ], [ \"Guinea (Guinée)\", \"gn\", \"224\" ], [ \"Guinea-Bissau (Guiné Bissau)\", \"gw\", \"245\" ], [ \"Guyana\", \"gy\", \"592\" ], [ \"Haiti\", \"ht\", \"509\" ], [ \"Honduras\", \"hn\", \"504\" ], [ \"Hong Kong (香港)\", \"hk\", \"852\" ], [ \"Hungary (Magyarország)\", \"hu\", \"36\" ], [ \"Iceland (Ísland)\", \"is\", \"354\" ], [ \"India (भारत)\", \"in\", \"91\" ], [ \"Indonesia\", \"id\", \"62\" ], [ \"Iran (‫ایران‬‎)\", \"ir\", \"98\" ], [ \"Iraq (‫العراق‬‎)\", \"iq\", \"964\" ], [ \"Ireland\", \"ie\", \"353\" ], [ \"Isle of Man\", \"im\", \"44\", 2, [ \"1624\", \"74576\", \"7524\", \"7924\", \"7624\" ] ], [ \"Israel (‫ישראל‬‎)\", \"il\", \"972\" ], [ \"Italy (Italia)\", \"it\", \"39\", 0 ], [ \"Jamaica\", \"jm\", \"1\", 4, [ \"876\", \"658\" ] ], [ \"Japan (日本)\", \"jp\", \"81\" ], [ \"Jersey\", \"je\", \"44\", 3, [ \"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\" ] ], [ \"Jordan (‫الأردن‬‎)\", \"jo\", \"962\" ], [ \"Kazakhstan (Казахстан)\", \"kz\", \"7\", 1, [ \"33\", \"7\" ] ], [ \"Kenya\", \"ke\", \"254\" ], [ \"Kiribati\", \"ki\", \"686\" ], [ \"Kosovo\", \"xk\", \"383\" ], [ \"Kuwait (‫الكويت‬‎)\", \"kw\", \"965\" ], [ \"Kyrgyzstan (Кыргызстан)\", \"kg\", \"996\" ], [ \"Laos (ລາວ)\", \"la\", \"856\" ], [ \"Latvia (Latvija)\", \"lv\", \"371\" ], [ \"Lebanon (‫لبنان‬‎)\", \"lb\", \"961\" ], [ \"Lesotho\", \"ls\", \"266\" ], [ \"Liberia\", \"lr\", \"231\" ], [ \"Libya (‫ليبيا‬‎)\", \"ly\", \"218\" ], [ \"Liechtenstein\", \"li\", \"423\" ], [ \"Lithuania (Lietuva)\", \"lt\", \"370\" ], [ \"Luxembourg\", \"lu\", \"352\" ], [ \"Macau (澳門)\", \"mo\", \"853\" ], [ \"Macedonia (FYROM) (Македонија)\", \"mk\", \"389\" ], [ \"Madagascar (Madagasikara)\", \"mg\", \"261\" ], [ \"Malawi\", \"mw\", \"265\" ], [ \"Malaysia\", \"my\", \"60\" ], [ \"Maldives\", \"mv\", \"960\" ], [ \"Mali\", \"ml\", \"223\" ], [ \"Malta\", \"mt\", \"356\" ], [ \"Marshall Islands\", \"mh\", \"692\" ], [ \"Martinique\", \"mq\", \"596\" ], [ \"Mauritania (‫موريتانيا‬‎)\", \"mr\", \"222\" ], [ \"Mauritius (Moris)\", \"mu\", \"230\" ], [ \"Mayotte\", \"yt\", \"262\", 1, [ \"269\", \"639\" ] ], [ \"Mexico (México)\", \"mx\", \"52\" ], [ \"Micronesia\", \"fm\", \"691\" ], [ \"Moldova (Republica Moldova)\", \"md\", \"373\" ], [ \"Monaco\", \"mc\", \"377\" ], [ \"Mongolia (Монгол)\", \"mn\", \"976\" ], [ \"Montenegro (Crna Gora)\", \"me\", \"382\" ], [ \"Montserrat\", \"ms\", \"1\", 16, [ \"664\" ] ], [ \"Morocco (‫المغرب‬‎)\", \"ma\", \"212\", 0 ], [ \"Mozambique (Moçambique)\", \"mz\", \"258\" ], [ \"Myanmar (Burma) (မြန်မာ)\", \"mm\", \"95\" ], [ \"Namibia (Namibië)\", \"na\", \"264\" ], [ \"Nauru\", \"nr\", \"674\" ], [ \"Nepal (नेपाल)\", \"np\", \"977\" ], [ \"Netherlands (Nederland)\", \"nl\", \"31\" ], [ \"New Caledonia (Nouvelle-Calédonie)\", \"nc\", \"687\" ], [ \"New Zealand\", \"nz\", \"64\" ], [ \"Nicaragua\", \"ni\", \"505\" ], [ \"Niger (Nijar)\", \"ne\", \"227\" ], [ \"Nigeria\", \"ng\", \"234\" ], [ \"Niue\", \"nu\", \"683\" ], [ \"Norfolk Island\", \"nf\", \"672\" ], [ \"North Korea (조선 민주주의 인민 공화국)\", \"kp\", \"850\" ], [ \"Northern Mariana Islands\", \"mp\", \"1\", 17, [ \"670\" ] ], [ \"Norway (Norge)\", \"no\", \"47\", 0 ], [ \"Oman (‫عُمان‬‎)\", \"om\", \"968\" ], [ \"Pakistan (‫پاکستان‬‎)\", \"pk\", \"92\" ], [ \"Palau\", \"pw\", \"680\" ], [ \"Palestine (‫فلسطين‬‎)\", \"ps\", \"970\" ], [ \"Panama (Panamá)\", \"pa\", \"507\" ], [ \"Papua New Guinea\", \"pg\", \"675\" ], [ \"Paraguay\", \"py\", \"595\" ], [ \"Peru (Perú)\", \"pe\", \"51\" ], [ \"Philippines\", \"ph\", \"63\" ], [ \"Poland (Polska)\", \"pl\", \"48\" ], [ \"Portugal\", \"pt\", \"351\" ], [ \"Puerto Rico\", \"pr\", \"1\", 3, [ \"787\", \"939\" ] ], [ \"Qatar (‫قطر‬‎)\", \"qa\", \"974\" ], [ \"Réunion (La Réunion)\", \"re\", \"262\", 0 ], [ \"Romania (România)\", \"ro\", \"40\" ], [ \"Russia (Россия)\", \"ru\", \"7\", 0 ], [ \"Rwanda\", \"rw\", \"250\" ], [ \"Saint Barthélemy\", \"bl\", \"590\", 1 ], [ \"Saint Helena\", \"sh\", \"290\" ], [ \"Saint Kitts and Nevis\", \"kn\", \"1\", 18, [ \"869\" ] ], [ \"Saint Lucia\", \"lc\", \"1\", 19, [ \"758\" ] ], [ \"Saint Martin (Saint-Martin (partie française))\", \"mf\", \"590\", 2 ], [ \"Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)\", \"pm\", \"508\" ], [ \"Saint Vincent and the Grenadines\", \"vc\", \"1\", 20, [ \"784\" ] ], [ \"Samoa\", \"ws\", \"685\" ], [ \"San Marino\", \"sm\", \"378\" ], [ \"São Tomé and Príncipe (São Tomé e Príncipe)\", \"st\", \"239\" ], [ \"Saudi Arabia (‫المملكة العربية السعودية‬‎)\", \"sa\", \"966\" ], [ \"Senegal (Sénégal)\", \"sn\", \"221\" ], [ \"Serbia (Србија)\", \"rs\", \"381\" ], [ \"Seychelles\", \"sc\", \"248\" ], [ \"Sierra Leone\", \"sl\", \"232\" ], [ \"Singapore\", \"sg\", \"65\" ], [ \"Sint Maarten\", \"sx\", \"1\", 21, [ \"721\" ] ], [ \"Slovakia (Slovensko)\", \"sk\", \"421\" ], [ \"Slovenia (Slovenija)\", \"si\", \"386\" ], [ \"Solomon Islands\", \"sb\", \"677\" ], [ \"Somalia (Soomaaliya)\", \"so\", \"252\" ], [ \"South Africa\", \"za\", \"27\" ], [ \"South Korea (대한민국)\", \"kr\", \"82\" ], [ \"South Sudan (‫جنوب السودان‬‎)\", \"ss\", \"211\" ], [ \"Spain (España)\", \"es\", \"34\" ], [ \"Sri Lanka (ශ්‍රී ලංකාව)\", \"lk\", \"94\" ], [ \"Sudan (‫السودان‬‎)\", \"sd\", \"249\" ], [ \"Suriname\", \"sr\", \"597\" ], [ \"Svalbard and Jan Mayen\", \"sj\", \"47\", 1, [ \"79\" ] ], [ \"Sweden (Sverige)\", \"se\", \"46\" ], [ \"Switzerland (Schweiz)\", \"ch\", \"41\" ], [ \"Syria (‫سوريا‬‎)\", \"sy\", \"963\" ], [ \"Taiwan (台灣)\", \"tw\", \"886\" ], [ \"Tajikistan\", \"tj\", \"992\" ], [ \"Tanzania\", \"tz\", \"255\" ], [ \"Thailand (ไทย)\", \"th\", \"66\" ], [ \"Timor-Leste\", \"tl\", \"670\" ], [ \"Togo\", \"tg\", \"228\" ], [ \"Tokelau\", \"tk\", \"690\" ], [ \"Tonga\", \"to\", \"676\" ], [ \"Trinidad and Tobago\", \"tt\", \"1\", 22, [ \"868\" ] ], [ \"Tunisia (‫تونس‬‎)\", \"tn\", \"216\" ], [ \"Turkey (Türkiye)\", \"tr\", \"90\" ], [ \"Turkmenistan\", \"tm\", \"993\" ], [ \"Turks and Caicos Islands\", \"tc\", \"1\", 23, [ \"649\" ] ], [ \"Tuvalu\", \"tv\", \"688\" ], [ \"U.S. Virgin Islands\", \"vi\", \"1\", 24, [ \"340\" ] ], [ \"Uganda\", \"ug\", \"256\" ], [ \"Ukraine (Україна)\", \"ua\", \"380\" ], [ \"United Arab Emirates (‫الإمارات العربية المتحدة‬‎)\", \"ae\", \"971\" ], [ \"United Kingdom\", \"gb\", \"44\", 0 ], [ \"United States\", \"us\", \"1\", 0 ], [ \"Uruguay\", \"uy\", \"598\" ], [ \"Uzbekistan (Oʻzbekiston)\", \"uz\", \"998\" ], [ \"Vanuatu\", \"vu\", \"678\" ], [ \"Vatican City (Città del Vaticano)\", \"va\", \"39\", 1, [ \"06698\" ] ], [ \"Venezuela\", \"ve\", \"58\" ], [ \"Vietnam (Việt Nam)\", \"vn\", \"84\" ], [ \"Wallis and Futuna (Wallis-et-Futuna)\", \"wf\", \"681\" ], [ \"Western Sahara (‫الصحراء الغربية‬‎)\", \"eh\", \"212\", 1, [ \"5288\", \"5289\" ] ], [ \"Yemen (‫اليمن‬‎)\", \"ye\", \"967\" ], [ \"Zambia\", \"zm\", \"260\" ], [ \"Zimbabwe\", \"zw\", \"263\" ], [ \"Åland Islands\", \"ax\", \"358\", 1, [ \"18\" ] ] ];\n        // loop over all of the countries above, restructuring the data to be objects with named keys\n        for (var i = 0; i < allCountries.length; i++) {\n            var c = allCountries[i];\n            allCountries[i] = {\n                name: c[0],\n                iso2: c[1],\n                dialCode: c[2],\n                priority: c[3] || 0,\n                areaCodes: c[4] || null\n            };\n        }\n        \"use strict\";\n        function _classCallCheck(instance, Constructor) {\n            if (!(instance instanceof Constructor)) {\n                throw new TypeError(\"Cannot call a class as a function\");\n            }\n        }\n        function _defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n                var descriptor = props[i];\n                descriptor.enumerable = descriptor.enumerable || false;\n                descriptor.configurable = true;\n                if (\"value\" in descriptor) descriptor.writable = true;\n                Object.defineProperty(target, descriptor.key, descriptor);\n            }\n        }\n        function _createClass(Constructor, protoProps, staticProps) {\n            if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) _defineProperties(Constructor, staticProps);\n            return Constructor;\n        }\n        var intlTelInputGlobals = {\n            getInstance: function getInstance(input) {\n                var id = input.getAttribute(\"data-intl-tel-input-id\");\n                return window.intlTelInputGlobals.instances[id];\n            },\n            instances: {},\n            // using a global like this allows us to mock it in the tests\n            documentReady: function documentReady() {\n                return document.readyState === \"complete\";\n            }\n        };\n        if (typeof window === \"object\") window.intlTelInputGlobals = intlTelInputGlobals;\n        // these vars persist through all instances of the plugin\n        var id = 0;\n        var defaults = {\n            // whether or not to allow the dropdown\n            allowDropdown: true,\n            // if there is just a dial code in the input: remove it on blur\n            autoHideDialCode: true,\n            // add a placeholder in the input with an example number for the selected country\n            autoPlaceholder: \"polite\",\n            // modify the parentClass\n            customContainer: \"\",\n            // modify the auto placeholder\n            customPlaceholder: null,\n            // append menu to specified element\n            dropdownContainer: null,\n            // don't display these countries\n            excludeCountries: [],\n            // format the input value during initialisation and on setNumber\n            formatOnDisplay: true,\n            // geoIp lookup function\n            geoIpLookup: null,\n            // inject a hidden input with this name, and on submit, populate it with the result of getNumber\n            hiddenInput: \"\",\n            // initial country\n            initialCountry: \"\",\n            // localized country names e.g. { 'de': 'Deutschland' }\n            localizedCountries: null,\n            // don't insert international dial codes\n            nationalMode: true,\n            // display only these countries\n            onlyCountries: [],\n            // number type to use for placeholders\n            placeholderNumberType: \"MOBILE\",\n            // the countries at the top of the list. defaults to united states and united kingdom\n            preferredCountries: [ \"us\", \"gb\" ],\n            // display the country dial code next to the selected flag so it's not part of the typed number\n            separateDialCode: false,\n            // specify the path to the libphonenumber script to enable validation/formatting\n            utilsScript: \"\"\n        };\n        // https://en.wikipedia.org/wiki/List_of_North_American_Numbering_Plan_area_codes#Non-geographic_area_codes\n        var regionlessNanpNumbers = [ \"800\", \"822\", \"833\", \"844\", \"855\", \"866\", \"877\", \"880\", \"881\", \"882\", \"883\", \"884\", \"885\", \"886\", \"887\", \"888\", \"889\" ];\n        // utility function to iterate over an object. can't use Object.entries or native forEach because\n        // of IE11\n        var forEachProp = function forEachProp(obj, callback) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                callback(keys[i], obj[keys[i]]);\n            }\n        };\n        // run a method on each instance of the plugin\n        var forEachInstance = function forEachInstance(method) {\n            forEachProp(window.intlTelInputGlobals.instances, function(key) {\n                window.intlTelInputGlobals.instances[key][method]();\n            });\n        };\n        // this is our plugin class that we will create an instance of\n        // eslint-disable-next-line no-unused-vars\n        var Iti = /*#__PURE__*/\n        function() {\n            function Iti(input, options) {\n                var _this = this;\n                _classCallCheck(this, Iti);\n                this.id = id++;\n                this.telInput = input;\n                this.activeItem = null;\n                this.highlightedItem = null;\n                // process specified options / defaults\n                // alternative to Object.assign, which isn't supported by IE11\n                var customOptions = options || {};\n                this.options = {};\n                forEachProp(defaults, function(key, value) {\n                    _this.options[key] = customOptions.hasOwnProperty(key) ? customOptions[key] : value;\n                });\n                this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n            }\n            _createClass(Iti, [ {\n                key: \"_init\",\n                value: function _init() {\n                    var _this2 = this;\n                    // if in nationalMode, disable options relating to dial codes\n                    if (this.options.nationalMode) this.options.autoHideDialCode = false;\n                    // if separateDialCode then doesn't make sense to A) insert dial code into input\n                    // (autoHideDialCode), and B) display national numbers (because we're displaying the country\n                    // dial code next to them)\n                    if (this.options.separateDialCode) {\n                        this.options.autoHideDialCode = this.options.nationalMode = false;\n                    }\n                    // we cannot just test screen size as some smartphones/website meta tags will report desktop\n                    // resolutions\n                    // Note: for some reason jasmine breaks if you put this in the main Plugin function with the\n                    // rest of these declarations\n                    // Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n                    this.isMobile = /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n                    if (this.isMobile) {\n                        // trigger the mobile dropdown css\n                        document.body.classList.add(\"iti-mobile\");\n                        // on mobile, we want a full screen dropdown, so we must append it to the body\n                        if (!this.options.dropdownContainer) this.options.dropdownContainer = document.body;\n                    }\n                    // these promises get resolved when their individual requests complete\n                    // this way the dev can do something like iti.promise.then(...) to know when all requests are\n                    // complete\n                    if (typeof Promise !== \"undefined\") {\n                        var autoCountryPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveAutoCountryPromise = resolve;\n                            _this2.rejectAutoCountryPromise = reject;\n                        });\n                        var utilsScriptPromise = new Promise(function(resolve, reject) {\n                            _this2.resolveUtilsScriptPromise = resolve;\n                            _this2.rejectUtilsScriptPromise = reject;\n                        });\n                        this.promise = Promise.all([ autoCountryPromise, utilsScriptPromise ]);\n                    } else {\n                        // prevent errors when Promise doesn't exist\n                        this.resolveAutoCountryPromise = this.rejectAutoCountryPromise = function() {};\n                        this.resolveUtilsScriptPromise = this.rejectUtilsScriptPromise = function() {};\n                    }\n                    // in various situations there could be no country selected initially, but we need to be able\n                    // to assume this variable exists\n                    this.selectedCountryData = {};\n                    // process all the data: onlyCountries, excludeCountries, preferredCountries etc\n                    this._processCountryData();\n                    // generate the markup\n                    this._generateMarkup();\n                    // set the initial state of the input value and the selected flag\n                    this._setInitialState();\n                    // start all of the event listeners: autoHideDialCode, input keydown, selectedFlag click\n                    this._initListeners();\n                    // utils script, and auto country\n                    this._initRequests();\n                }\n            }, {\n                key: \"_processCountryData\",\n                value: function _processCountryData() {\n                    // process onlyCountries or excludeCountries array if present\n                    this._processAllCountries();\n                    // process the countryCodes map\n                    this._processCountryCodes();\n                    // process the preferredCountries\n                    this._processPreferredCountries();\n                    // translate countries according to localizedCountries option\n                    if (this.options.localizedCountries) this._translateCountriesByLocale();\n                    // sort countries by name\n                    if (this.options.onlyCountries.length || this.options.localizedCountries) {\n                        this.countries.sort(this._countryNameSort);\n                    }\n                }\n            }, {\n                key: \"_addCountryCode\",\n                value: function _addCountryCode(iso2, countryCode, priority) {\n                    if (countryCode.length > this.countryCodeMaxLen) {\n                        this.countryCodeMaxLen = countryCode.length;\n                    }\n                    if (!this.countryCodes.hasOwnProperty(countryCode)) {\n                        this.countryCodes[countryCode] = [];\n                    }\n                    // bail if we already have this country for this countryCode\n                    for (var i = 0; i < this.countryCodes[countryCode].length; i++) {\n                        if (this.countryCodes[countryCode][i] === iso2) return;\n                    }\n                    // check for undefined as 0 is falsy\n                    var index = priority !== undefined ? priority : this.countryCodes[countryCode].length;\n                    this.countryCodes[countryCode][index] = iso2;\n                }\n            }, {\n                key: \"_processAllCountries\",\n                value: function _processAllCountries() {\n                    if (this.options.onlyCountries.length) {\n                        var lowerCaseOnlyCountries = this.options.onlyCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseOnlyCountries.indexOf(country.iso2) > -1;\n                        });\n                    } else if (this.options.excludeCountries.length) {\n                        var lowerCaseExcludeCountries = this.options.excludeCountries.map(function(country) {\n                            return country.toLowerCase();\n                        });\n                        this.countries = allCountries.filter(function(country) {\n                            return lowerCaseExcludeCountries.indexOf(country.iso2) === -1;\n                        });\n                    } else {\n                        this.countries = allCountries;\n                    }\n                }\n            }, {\n                key: \"_translateCountriesByLocale\",\n                value: function _translateCountriesByLocale() {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var iso = this.countries[i].iso2.toLowerCase();\n                        if (this.options.localizedCountries.hasOwnProperty(iso)) {\n                            this.countries[i].name = this.options.localizedCountries[iso];\n                        }\n                    }\n                }\n            }, {\n                key: \"_countryNameSort\",\n                value: function _countryNameSort(a, b) {\n                    return a.name.localeCompare(b.name);\n                }\n            }, {\n                key: \"_processCountryCodes\",\n                value: function _processCountryCodes() {\n                    this.countryCodeMaxLen = 0;\n                    // here we store just dial codes\n                    this.dialCodes = {};\n                    // here we store \"country codes\" (both dial codes and their area codes)\n                    this.countryCodes = {};\n                    // first: add dial codes\n                    for (var i = 0; i < this.countries.length; i++) {\n                        var c = this.countries[i];\n                        if (!this.dialCodes[c.dialCode]) this.dialCodes[c.dialCode] = true;\n                        this._addCountryCode(c.iso2, c.dialCode, c.priority);\n                    }\n                    // next: add area codes\n                    // this is a second loop over countries, to make sure we have all of the \"root\" countries\n                    // already in the map, so that we can access them, as each time we add an area code substring\n                    // to the map, we also need to include the \"root\" country's code, as that also matches\n                    for (var _i = 0; _i < this.countries.length; _i++) {\n                        var _c = this.countries[_i];\n                        // area codes\n                        if (_c.areaCodes) {\n                            var rootCountryCode = this.countryCodes[_c.dialCode][0];\n                            // for each area code\n                            for (var j = 0; j < _c.areaCodes.length; j++) {\n                                var areaCode = _c.areaCodes[j];\n                                // for each digit in the area code to add all partial matches as well\n                                for (var k = 1; k < areaCode.length; k++) {\n                                    var partialDialCode = _c.dialCode + areaCode.substr(0, k);\n                                    // start with the root country, as that also matches this dial code\n                                    this._addCountryCode(rootCountryCode, partialDialCode);\n                                    this._addCountryCode(_c.iso2, partialDialCode);\n                                }\n                                // add the full area code\n                                this._addCountryCode(_c.iso2, _c.dialCode + areaCode);\n                            }\n                        }\n                    }\n                }\n            }, {\n                key: \"_processPreferredCountries\",\n                value: function _processPreferredCountries() {\n                    this.preferredCountries = [];\n                    for (var i = 0; i < this.options.preferredCountries.length; i++) {\n                        var countryCode = this.options.preferredCountries[i].toLowerCase();\n                        var countryData = this._getCountryData(countryCode, false, true);\n                        if (countryData) this.preferredCountries.push(countryData);\n                    }\n                }\n            }, {\n                key: \"_createEl\",\n                value: function _createEl(name, attrs, container) {\n                    var el = document.createElement(name);\n                    if (attrs) forEachProp(attrs, function(key, value) {\n                        return el.setAttribute(key, value);\n                    });\n                    if (container) container.appendChild(el);\n                    return el;\n                }\n            }, {\n                key: \"_generateMarkup\",\n                value: function _generateMarkup() {\n                    // if autocomplete does not exist on the element and its form, then\n                    // prevent autocomplete as there's no safe, cross-browser event we can react to, so it can\n                    // easily put the plugin in an inconsistent state e.g. the wrong flag selected for the\n                    // autocompleted number, which on submit could mean wrong number is saved (esp in nationalMode)\n                    if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n                        this.telInput.setAttribute(\"autocomplete\", \"off\");\n                    }\n                    // containers (mostly for positioning)\n                    var parentClass = \"iti\";\n                    if (this.options.allowDropdown) parentClass += \" iti--allow-dropdown\";\n                    if (this.options.separateDialCode) parentClass += \" iti--separate-dial-code\";\n                    if (this.options.customContainer) {\n                        parentClass += \" \";\n                        parentClass += this.options.customContainer;\n                    }\n                    var wrapper = this._createEl(\"div\", {\n                        \"class\": parentClass\n                    });\n                    this.telInput.parentNode.insertBefore(wrapper, this.telInput);\n                    this.flagsContainer = this._createEl(\"div\", {\n                        \"class\": \"iti__flag-container\"\n                    }, wrapper);\n                    wrapper.appendChild(this.telInput);\n                    // selected flag (displayed to left of input)\n                    this.selectedFlag = this._createEl(\"div\", {\n                        \"class\": \"iti__selected-flag\",\n                        role: \"combobox\",\n                        \"aria-controls\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-owns\": \"iti-\".concat(this.id, \"__country-listbox\"),\n                        \"aria-expanded\": \"false\"\n                    }, this.flagsContainer);\n                    this.selectedFlagInner = this._createEl(\"div\", {\n                        \"class\": \"iti__flag\"\n                    }, this.selectedFlag);\n                    if (this.options.separateDialCode) {\n                        this.selectedDialCode = this._createEl(\"div\", {\n                            \"class\": \"iti__selected-dial-code\"\n                        }, this.selectedFlag);\n                    }\n                    if (this.options.allowDropdown) {\n                        // make element focusable and tab navigable\n                        this.selectedFlag.setAttribute(\"tabindex\", \"0\");\n                        this.dropdownArrow = this._createEl(\"div\", {\n                            \"class\": \"iti__arrow\"\n                        }, this.selectedFlag);\n                        // country dropdown: preferred countries, then divider, then all countries\n                        this.countryList = this._createEl(\"ul\", {\n                            \"class\": \"iti__country-list iti__hide\",\n                            id: \"iti-\".concat(this.id, \"__country-listbox\"),\n                            role: \"listbox\",\n                            \"aria-label\": \"List of countries\"\n                        });\n                        if (this.preferredCountries.length) {\n                            this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n                            this._createEl(\"li\", {\n                                \"class\": \"iti__divider\",\n                                role: \"separator\",\n                                \"aria-disabled\": \"true\"\n                            }, this.countryList);\n                        }\n                        this._appendListItems(this.countries, \"iti__standard\");\n                        // create dropdownContainer markup\n                        if (this.options.dropdownContainer) {\n                            this.dropdown = this._createEl(\"div\", {\n                                \"class\": \"iti iti--container\"\n                            });\n                            this.dropdown.appendChild(this.countryList);\n                        } else {\n                            this.flagsContainer.appendChild(this.countryList);\n                        }\n                    }\n                    if (this.options.hiddenInput) {\n                        var hiddenInputName = this.options.hiddenInput;\n                        var name = this.telInput.getAttribute(\"name\");\n                        if (name) {\n                            var i = name.lastIndexOf(\"[\");\n                            // if input name contains square brackets, then give the hidden input the same name,\n                            // replacing the contents of the last set of brackets with the given hiddenInput name\n                            if (i !== -1) hiddenInputName = \"\".concat(name.substr(0, i), \"[\").concat(hiddenInputName, \"]\");\n                        }\n                        this.hiddenInput = this._createEl(\"input\", {\n                            type: \"hidden\",\n                            name: hiddenInputName\n                        });\n                        wrapper.appendChild(this.hiddenInput);\n                    }\n                }\n            }, {\n                key: \"_appendListItems\",\n                value: function _appendListItems(countries, className, preferred) {\n                    // we create so many DOM elements, it is faster to build a temp string\n                    // and then add everything to the DOM in one go at the end\n                    var tmp = \"\";\n                    // for each country\n                    for (var i = 0; i < countries.length; i++) {\n                        var c = countries[i];\n                        var idSuffix = preferred ? \"-preferred\" : \"\";\n                        // open the list item\n                        tmp += \"<li class='iti__country \".concat(className, \"' tabIndex='-1' id='iti-\").concat(this.id, \"__item-\").concat(c.iso2).concat(idSuffix, \"' role='option' data-dial-code='\").concat(c.dialCode, \"' data-country-code='\").concat(c.iso2, \"' aria-selected='false'>\");\n                        // add the flag\n                        tmp += \"<div class='iti__flag-box'><div class='iti__flag iti__\".concat(c.iso2, \"'></div></div>\");\n                        // and the country name and dial code\n                        tmp += \"<span class='iti__country-name'>\".concat(c.name, \"</span>\");\n                        tmp += \"<span class='iti__dial-code'>+\".concat(c.dialCode, \"</span>\");\n                        // close the list item\n                        tmp += \"</li>\";\n                    }\n                    this.countryList.insertAdjacentHTML(\"beforeend\", tmp);\n                }\n            }, {\n                key: \"_setInitialState\",\n                value: function _setInitialState() {\n                    // fix firefox bug: when first load page (with input with value set to number with intl dial\n                    // code) and initialising plugin removes the dial code from the input, then refresh page,\n                    // and we try to init plugin again but this time on number without dial code so get grey flag\n                    var attributeValue = this.telInput.getAttribute(\"value\");\n                    var inputValue = this.telInput.value;\n                    var useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n                    var val = useAttribute ? attributeValue : inputValue;\n                    var dialCode = this._getDialCode(val);\n                    var isRegionlessNanp = this._isRegionlessNanp(val);\n                    var _this$options = this.options, initialCountry = _this$options.initialCountry, nationalMode = _this$options.nationalMode, autoHideDialCode = _this$options.autoHideDialCode, separateDialCode = _this$options.separateDialCode;\n                    // if we already have a dial code, and it's not a regionlessNanp, we can go ahead and set the\n                    // flag, else fall back to the default country\n                    if (dialCode && !isRegionlessNanp) {\n                        this._updateFlagFromNumber(val);\n                    } else if (initialCountry !== \"auto\") {\n                        // see if we should select a flag\n                        if (initialCountry) {\n                            this._setFlag(initialCountry.toLowerCase());\n                        } else {\n                            if (dialCode && isRegionlessNanp) {\n                                // has intl dial code, is regionless nanp, and no initialCountry, so default to US\n                                this._setFlag(\"us\");\n                            } else {\n                                // no dial code and no initialCountry, so default to first in list\n                                this.defaultCountry = this.preferredCountries.length ? this.preferredCountries[0].iso2 : this.countries[0].iso2;\n                                if (!val) {\n                                    this._setFlag(this.defaultCountry);\n                                }\n                            }\n                        }\n                        // if empty and no nationalMode and no autoHideDialCode then insert the default dial code\n                        if (!val && !nationalMode && !autoHideDialCode && !separateDialCode) {\n                            this.telInput.value = \"+\".concat(this.selectedCountryData.dialCode);\n                        }\n                    }\n                    // NOTE: if initialCountry is set to auto, that will be handled separately\n                    // format - note this wont be run after _updateDialCode as that's only called if no val\n                    if (val) this._updateValFromNumber(val);\n                }\n            }, {\n                key: \"_initListeners\",\n                value: function _initListeners() {\n                    this._initKeyListeners();\n                    if (this.options.autoHideDialCode) this._initBlurListeners();\n                    if (this.options.allowDropdown) this._initDropdownListeners();\n                    if (this.hiddenInput) this._initHiddenInputListener();\n                }\n            }, {\n                key: \"_initHiddenInputListener\",\n                value: function _initHiddenInputListener() {\n                    var _this3 = this;\n                    this._handleHiddenInputSubmit = function() {\n                        _this3.hiddenInput.value = _this3.getNumber();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleHiddenInputSubmit);\n                }\n            }, {\n                key: \"_getClosestLabel\",\n                value: function _getClosestLabel() {\n                    var el = this.telInput;\n                    while (el && el.tagName !== \"LABEL\") {\n                        el = el.parentNode;\n                    }\n                    return el;\n                }\n            }, {\n                key: \"_initDropdownListeners\",\n                value: function _initDropdownListeners() {\n                    var _this4 = this;\n                    // hack for input nested inside label (which is valid markup): clicking the selected-flag to\n                    // open the dropdown would then automatically trigger a 2nd click on the input which would\n                    // close it again\n                    this._handleLabelClick = function(e) {\n                        // if the dropdown is closed, then focus the input, else ignore the click\n                        if (_this4.countryList.classList.contains(\"iti__hide\")) _this4.telInput.focus(); else e.preventDefault();\n                    };\n                    var label = this._getClosestLabel();\n                    if (label) label.addEventListener(\"click\", this._handleLabelClick);\n                    // toggle country dropdown on click\n                    this._handleClickSelectedFlag = function() {\n                        // only intercept this event if we're opening the dropdown\n                        // else let it bubble up to the top (\"click-off-to-close\" listener)\n                        // we cannot just stopPropagation as it may be needed to close another instance\n                        if (_this4.countryList.classList.contains(\"iti__hide\") && !_this4.telInput.disabled && !_this4.telInput.readOnly) {\n                            _this4._showDropdown();\n                        }\n                    };\n                    this.selectedFlag.addEventListener(\"click\", this._handleClickSelectedFlag);\n                    // open dropdown list if currently focused\n                    this._handleFlagsContainerKeydown = function(e) {\n                        var isDropdownHidden = _this4.countryList.classList.contains(\"iti__hide\");\n                        if (isDropdownHidden && [ \"ArrowUp\", \"Up\", \"ArrowDown\", \"Down\", \" \", \"Enter\" ].indexOf(e.key) !== -1) {\n                            // prevent form from being submitted if \"ENTER\" was pressed\n                            e.preventDefault();\n                            // prevent event from being handled again by document\n                            e.stopPropagation();\n                            _this4._showDropdown();\n                        }\n                        // allow navigation from dropdown to input on TAB\n                        if (e.key === \"Tab\") _this4._closeDropdown();\n                    };\n                    this.flagsContainer.addEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                }\n            }, {\n                key: \"_initRequests\",\n                value: function _initRequests() {\n                    var _this5 = this;\n                    // if the user has specified the path to the utils script, fetch it on window.load, else resolve\n                    if (this.options.utilsScript && !window.intlTelInputUtils) {\n                        // if the plugin is being initialised after the window.load event has already been fired\n                        if (window.intlTelInputGlobals.documentReady()) {\n                            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n                        } else {\n                            // wait until the load event so we don't block any other requests e.g. the flags image\n                            window.addEventListener(\"load\", function() {\n                                window.intlTelInputGlobals.loadUtils(_this5.options.utilsScript);\n                            });\n                        }\n                    } else this.resolveUtilsScriptPromise();\n                    if (this.options.initialCountry === \"auto\") this._loadAutoCountry(); else this.resolveAutoCountryPromise();\n                }\n            }, {\n                key: \"_loadAutoCountry\",\n                value: function _loadAutoCountry() {\n                    // 3 options:\n                    // 1) already loaded (we're done)\n                    // 2) not already started loading (start)\n                    // 3) already started loading (do nothing - just wait for loading callback to fire)\n                    if (window.intlTelInputGlobals.autoCountry) {\n                        this.handleAutoCountry();\n                    } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n                        // don't do this twice!\n                        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n                        if (typeof this.options.geoIpLookup === \"function\") {\n                            this.options.geoIpLookup(function(countryCode) {\n                                window.intlTelInputGlobals.autoCountry = countryCode.toLowerCase();\n                                // tell all instances the auto country is ready\n                                // TODO: this should just be the current instances\n                                // UPDATE: use setTimeout in case their geoIpLookup function calls this callback straight\n                                // away (e.g. if they have already done the geo ip lookup somewhere else). Using\n                                // setTimeout means that the current thread of execution will finish before executing\n                                // this, which allows the plugin to finish initialising.\n                                setTimeout(function() {\n                                    return forEachInstance(\"handleAutoCountry\");\n                                });\n                            }, function() {\n                                return forEachInstance(\"rejectAutoCountryPromise\");\n                            });\n                        }\n                    }\n                }\n            }, {\n                key: \"_initKeyListeners\",\n                value: function _initKeyListeners() {\n                    var _this6 = this;\n                    // update flag on keyup\n                    this._handleKeyupEvent = function() {\n                        if (_this6._updateFlagFromNumber(_this6.telInput.value)) {\n                            _this6._triggerCountryChange();\n                        }\n                    };\n                    this.telInput.addEventListener(\"keyup\", this._handleKeyupEvent);\n                    // update flag on cut/paste events (now supported in all major browsers)\n                    this._handleClipboardEvent = function() {\n                        // hack because \"paste\" event is fired before input is updated\n                        setTimeout(_this6._handleKeyupEvent);\n                    };\n                    this.telInput.addEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.addEventListener(\"paste\", this._handleClipboardEvent);\n                }\n            }, {\n                key: \"_cap\",\n                value: function _cap(number) {\n                    var max = this.telInput.getAttribute(\"maxlength\");\n                    return max && number.length > max ? number.substr(0, max) : number;\n                }\n            }, {\n                key: \"_initBlurListeners\",\n                value: function _initBlurListeners() {\n                    var _this7 = this;\n                    // on blur or form submit: if just a dial code then remove it\n                    this._handleSubmitOrBlurEvent = function() {\n                        _this7._removeEmptyDialCode();\n                    };\n                    if (this.telInput.form) this.telInput.form.addEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                    this.telInput.addEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                }\n            }, {\n                key: \"_removeEmptyDialCode\",\n                value: function _removeEmptyDialCode() {\n                    if (this.telInput.value.charAt(0) === \"+\") {\n                        var numeric = this._getNumeric(this.telInput.value);\n                        // if just a plus, or if just a dial code\n                        if (!numeric || this.selectedCountryData.dialCode === numeric) {\n                            this.telInput.value = \"\";\n                        }\n                    }\n                }\n            }, {\n                key: \"_getNumeric\",\n                value: function _getNumeric(s) {\n                    return s.replace(/\\D/g, \"\");\n                }\n            }, {\n                key: \"_trigger\",\n                value: function _trigger(name) {\n                    // have to use old school document.createEvent as IE11 doesn't support `new Event()` syntax\n                    var e = document.createEvent(\"Event\");\n                    e.initEvent(name, true, true);\n                    // can bubble, and is cancellable\n                    this.telInput.dispatchEvent(e);\n                }\n            }, {\n                key: \"_showDropdown\",\n                value: function _showDropdown() {\n                    this.countryList.classList.remove(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"true\");\n                    this._setDropdownPosition();\n                    // update highlighting and scroll to active list item\n                    if (this.activeItem) {\n                        this._highlightListItem(this.activeItem, false);\n                        this._scrollTo(this.activeItem, true);\n                    }\n                    // bind all the dropdown-related listeners: mouseover, click, click-off, keydown\n                    this._bindDropdownListeners();\n                    // update the arrow\n                    this.dropdownArrow.classList.add(\"iti__arrow--up\");\n                    this._trigger(\"open:countrydropdown\");\n                }\n            }, {\n                key: \"_toggleClass\",\n                value: function _toggleClass(el, className, shouldHaveClass) {\n                    if (shouldHaveClass && !el.classList.contains(className)) el.classList.add(className); else if (!shouldHaveClass && el.classList.contains(className)) el.classList.remove(className);\n                }\n            }, {\n                key: \"_setDropdownPosition\",\n                value: function _setDropdownPosition() {\n                    var _this8 = this;\n                    if (this.options.dropdownContainer) {\n                        this.options.dropdownContainer.appendChild(this.dropdown);\n                    }\n                    if (!this.isMobile) {\n                        var pos = this.telInput.getBoundingClientRect();\n                        // windowTop from https://stackoverflow.com/a/14384091/217866\n                        var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                        var inputTop = pos.top + windowTop;\n                        var dropdownHeight = this.countryList.offsetHeight;\n                        // dropdownFitsBelow = (dropdownBottom < windowBottom)\n                        var dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n                        var dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n                        // by default, the dropdown will be below the input. If we want to position it above the\n                        // input, we add the dropup class.\n                        this._toggleClass(this.countryList, \"iti__country-list--dropup\", !dropdownFitsBelow && dropdownFitsAbove);\n                        // if dropdownContainer is enabled, calculate postion\n                        if (this.options.dropdownContainer) {\n                            // by default the dropdown will be directly over the input because it's not in the flow.\n                            // If we want to position it below, we need to add some extra top value.\n                            var extraTop = !dropdownFitsBelow && dropdownFitsAbove ? 0 : this.telInput.offsetHeight;\n                            // calculate placement\n                            this.dropdown.style.top = \"\".concat(inputTop + extraTop, \"px\");\n                            this.dropdown.style.left = \"\".concat(pos.left + document.body.scrollLeft, \"px\");\n                            // close menu on window scroll\n                            this._handleWindowScroll = function() {\n                                return _this8._closeDropdown();\n                            };\n                            window.addEventListener(\"scroll\", this._handleWindowScroll);\n                        }\n                    }\n                }\n            }, {\n                key: \"_getClosestListItem\",\n                value: function _getClosestListItem(target) {\n                    var el = target;\n                    while (el && el !== this.countryList && !el.classList.contains(\"iti__country\")) {\n                        el = el.parentNode;\n                    }\n                    // if we reached the countryList element, then return null\n                    return el === this.countryList ? null : el;\n                }\n            }, {\n                key: \"_bindDropdownListeners\",\n                value: function _bindDropdownListeners() {\n                    var _this9 = this;\n                    // when mouse over a list item, just highlight that one\n                    // we add the class \"highlight\", so if they hit \"enter\" we know which one to select\n                    this._handleMouseoverCountryList = function(e) {\n                        // handle event delegation, as we're listening for this event on the countryList\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._highlightListItem(listItem, false);\n                    };\n                    this.countryList.addEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    // listen for country selection\n                    this._handleClickCountryList = function(e) {\n                        var listItem = _this9._getClosestListItem(e.target);\n                        if (listItem) _this9._selectListItem(listItem);\n                    };\n                    this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n                    // click off to close\n                    // (except when this initial opening click is bubbling up)\n                    // we cannot just stopPropagation as it may be needed to close another instance\n                    var isOpening = true;\n                    this._handleClickOffToClose = function() {\n                        if (!isOpening) _this9._closeDropdown();\n                        isOpening = false;\n                    };\n                    document.documentElement.addEventListener(\"click\", this._handleClickOffToClose);\n                    // listen for up/down scrolling, enter to select, or letters to jump to country name.\n                    // use keydown as keypress doesn't fire for non-char keys and we want to catch if they\n                    // just hit down and hold it to scroll down (no keyup event).\n                    // listen on the document because that's where key events are triggered if no input has focus\n                    var query = \"\";\n                    var queryTimer = null;\n                    this._handleKeydownOnDropdown = function(e) {\n                        // prevent down key from scrolling the whole page,\n                        // and enter key from submitting a form etc\n                        e.preventDefault();\n                        // up and down to navigate\n                        if (e.key === \"ArrowUp\" || e.key === \"Up\" || e.key === \"ArrowDown\" || e.key === \"Down\") _this9._handleUpDownKey(e.key); else if (e.key === \"Enter\") _this9._handleEnterKey(); else if (e.key === \"Escape\") _this9._closeDropdown(); else if (/^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n                            // jump to countries that start with the query string\n                            if (queryTimer) clearTimeout(queryTimer);\n                            query += e.key.toLowerCase();\n                            _this9._searchForCountry(query);\n                            // if the timer hits 1 second, reset the query\n                            queryTimer = setTimeout(function() {\n                                query = \"\";\n                            }, 1e3);\n                        }\n                    };\n                    document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                }\n            }, {\n                key: \"_handleUpDownKey\",\n                value: function _handleUpDownKey(key) {\n                    var next = key === \"ArrowUp\" || key === \"Up\" ? this.highlightedItem.previousElementSibling : this.highlightedItem.nextElementSibling;\n                    if (next) {\n                        // skip the divider\n                        if (next.classList.contains(\"iti__divider\")) {\n                            next = key === \"ArrowUp\" || key === \"Up\" ? next.previousElementSibling : next.nextElementSibling;\n                        }\n                        this._highlightListItem(next, true);\n                    }\n                }\n            }, {\n                key: \"_handleEnterKey\",\n                value: function _handleEnterKey() {\n                    if (this.highlightedItem) this._selectListItem(this.highlightedItem);\n                }\n            }, {\n                key: \"_searchForCountry\",\n                value: function _searchForCountry(query) {\n                    for (var i = 0; i < this.countries.length; i++) {\n                        if (this._startsWith(this.countries[i].name, query)) {\n                            var listItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(this.countries[i].iso2));\n                            // update highlighting and scroll\n                            this._highlightListItem(listItem, false);\n                            this._scrollTo(listItem, true);\n                            break;\n                        }\n                    }\n                }\n            }, {\n                key: \"_startsWith\",\n                value: function _startsWith(a, b) {\n                    return a.substr(0, b.length).toLowerCase() === b;\n                }\n            }, {\n                key: \"_updateValFromNumber\",\n                value: function _updateValFromNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n                        var useNational = !this.options.separateDialCode && (this.options.nationalMode || number.charAt(0) !== \"+\");\n                        var _intlTelInputUtils$nu = intlTelInputUtils.numberFormat, NATIONAL = _intlTelInputUtils$nu.NATIONAL, INTERNATIONAL = _intlTelInputUtils$nu.INTERNATIONAL;\n                        var format = useNational ? NATIONAL : INTERNATIONAL;\n                        number = intlTelInputUtils.formatNumber(number, this.selectedCountryData.iso2, format);\n                    }\n                    number = this._beforeSetNumber(number);\n                    this.telInput.value = number;\n                }\n            }, {\n                key: \"_updateFlagFromNumber\",\n                value: function _updateFlagFromNumber(originalNumber) {\n                    // if we're in nationalMode and we already have US/Canada selected, make sure the number starts\n                    // with a +1 so _getDialCode will be able to extract the area code\n                    // update: if we dont yet have selectedCountryData, but we're here (trying to update the flag\n                    // from the number), that means we're initialising the plugin with a number that already has a\n                    // dial code, so fine to ignore this bit\n                    var number = originalNumber;\n                    var selectedDialCode = this.selectedCountryData.dialCode;\n                    var isNanp = selectedDialCode === \"1\";\n                    if (number && this.options.nationalMode && isNanp && number.charAt(0) !== \"+\") {\n                        if (number.charAt(0) !== \"1\") number = \"1\".concat(number);\n                        number = \"+\".concat(number);\n                    }\n                    // update flag if user types area code for another country\n                    if (this.options.separateDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n                        number = \"+\".concat(selectedDialCode).concat(number);\n                    }\n                    // try and extract valid dial code from input\n                    var dialCode = this._getDialCode(number, true);\n                    var numeric = this._getNumeric(number);\n                    var countryCode = null;\n                    if (dialCode) {\n                        var countryCodes = this.countryCodes[this._getNumeric(dialCode)];\n                        // check if the right country is already selected. this should be false if the number is\n                        // longer than the matched dial code because in this case we need to make sure that if\n                        // there are multiple country matches, that the first one is selected (note: we could\n                        // just check that here, but it requires the same loop that we already have later)\n                        var alreadySelected = countryCodes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n                        var isRegionlessNanpNumber = selectedDialCode === \"1\" && this._isRegionlessNanp(numeric);\n                        // only update the flag if:\n                        // A) NOT (we currently have a NANP flag selected, and the number is a regionlessNanp)\n                        // AND\n                        // B) the right country is not already selected\n                        if (!isRegionlessNanpNumber && !alreadySelected) {\n                            // if using onlyCountries option, countryCodes[0] may be empty, so we must find the first\n                            // non-empty index\n                            for (var j = 0; j < countryCodes.length; j++) {\n                                if (countryCodes[j]) {\n                                    countryCode = countryCodes[j];\n                                    break;\n                                }\n                            }\n                        }\n                    } else if (number.charAt(0) === \"+\" && numeric.length) {\n                        // invalid dial code, so empty\n                        // Note: use getNumeric here because the number has not been formatted yet, so could contain\n                        // bad chars\n                        countryCode = \"\";\n                    } else if (!number || number === \"+\") {\n                        // empty, or just a plus, so default\n                        countryCode = this.defaultCountry;\n                    }\n                    if (countryCode !== null) {\n                        return this._setFlag(countryCode);\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_isRegionlessNanp\",\n                value: function _isRegionlessNanp(number) {\n                    var numeric = this._getNumeric(number);\n                    if (numeric.charAt(0) === \"1\") {\n                        var areaCode = numeric.substr(1, 3);\n                        return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n                    }\n                    return false;\n                }\n            }, {\n                key: \"_highlightListItem\",\n                value: function _highlightListItem(listItem, shouldFocus) {\n                    var prevItem = this.highlightedItem;\n                    if (prevItem) prevItem.classList.remove(\"iti__highlight\");\n                    this.highlightedItem = listItem;\n                    this.highlightedItem.classList.add(\"iti__highlight\");\n                    if (shouldFocus) this.highlightedItem.focus();\n                }\n            }, {\n                key: \"_getCountryData\",\n                value: function _getCountryData(countryCode, ignoreOnlyCountriesOption, allowFail) {\n                    var countryList = ignoreOnlyCountriesOption ? allCountries : this.countries;\n                    for (var i = 0; i < countryList.length; i++) {\n                        if (countryList[i].iso2 === countryCode) {\n                            return countryList[i];\n                        }\n                    }\n                    if (allowFail) {\n                        return null;\n                    }\n                    throw new Error(\"No country data for '\".concat(countryCode, \"'\"));\n                }\n            }, {\n                key: \"_setFlag\",\n                value: function _setFlag(countryCode) {\n                    var prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n                    // do this first as it will throw an error and stop if countryCode is invalid\n                    this.selectedCountryData = countryCode ? this._getCountryData(countryCode, false, false) : {};\n                    // update the defaultCountry - we only need the iso2 from now on, so just store that\n                    if (this.selectedCountryData.iso2) {\n                        this.defaultCountry = this.selectedCountryData.iso2;\n                    }\n                    this.selectedFlagInner.setAttribute(\"class\", \"iti__flag iti__\".concat(countryCode));\n                    // update the selected country's title attribute\n                    var title = countryCode ? \"\".concat(this.selectedCountryData.name, \": +\").concat(this.selectedCountryData.dialCode) : \"Unknown\";\n                    this.selectedFlag.setAttribute(\"title\", title);\n                    if (this.options.separateDialCode) {\n                        var dialCode = this.selectedCountryData.dialCode ? \"+\".concat(this.selectedCountryData.dialCode) : \"\";\n                        this.selectedDialCode.innerHTML = dialCode;\n                        // offsetWidth is zero if input is in a hidden container during initialisation\n                        var selectedFlagWidth = this.selectedFlag.offsetWidth || this._getHiddenSelectedFlagWidth();\n                        // add 6px of padding after the grey selected-dial-code box, as this is what we use in the css\n                        this.telInput.style.paddingLeft = \"\".concat(selectedFlagWidth + 6, \"px\");\n                    }\n                    // and the input's placeholder\n                    this._updatePlaceholder();\n                    // update the active list item\n                    if (this.options.allowDropdown) {\n                        var prevItem = this.activeItem;\n                        if (prevItem) {\n                            prevItem.classList.remove(\"iti__active\");\n                            prevItem.setAttribute(\"aria-selected\", \"false\");\n                        }\n                        if (countryCode) {\n                            // check if there is a preferred item first, else fall back to standard\n                            var nextItem = this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode, \"-preferred\")) || this.countryList.querySelector(\"#iti-\".concat(this.id, \"__item-\").concat(countryCode));\n                            nextItem.setAttribute(\"aria-selected\", \"true\");\n                            nextItem.classList.add(\"iti__active\");\n                            this.activeItem = nextItem;\n                            this.selectedFlag.setAttribute(\"aria-activedescendant\", nextItem.getAttribute(\"id\"));\n                        }\n                    }\n                    // return if the flag has changed or not\n                    return prevCountry.iso2 !== countryCode;\n                }\n            }, {\n                key: \"_getHiddenSelectedFlagWidth\",\n                value: function _getHiddenSelectedFlagWidth() {\n                    // to get the right styling to apply, all we need is a shallow clone of the container,\n                    // and then to inject a deep clone of the selectedFlag element\n                    var containerClone = this.telInput.parentNode.cloneNode();\n                    containerClone.style.visibility = \"hidden\";\n                    document.body.appendChild(containerClone);\n                    var flagsContainerClone = this.flagsContainer.cloneNode();\n                    containerClone.appendChild(flagsContainerClone);\n                    var selectedFlagClone = this.selectedFlag.cloneNode(true);\n                    flagsContainerClone.appendChild(selectedFlagClone);\n                    var width = selectedFlagClone.offsetWidth;\n                    containerClone.parentNode.removeChild(containerClone);\n                    return width;\n                }\n            }, {\n                key: \"_updatePlaceholder\",\n                value: function _updatePlaceholder() {\n                    var shouldSetPlaceholder = this.options.autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && this.options.autoPlaceholder === \"polite\";\n                    if (window.intlTelInputUtils && shouldSetPlaceholder) {\n                        var numberType = intlTelInputUtils.numberType[this.options.placeholderNumberType];\n                        var placeholder = this.selectedCountryData.iso2 ? intlTelInputUtils.getExampleNumber(this.selectedCountryData.iso2, this.options.nationalMode, numberType) : \"\";\n                        placeholder = this._beforeSetNumber(placeholder);\n                        if (typeof this.options.customPlaceholder === \"function\") {\n                            placeholder = this.options.customPlaceholder(placeholder, this.selectedCountryData);\n                        }\n                        this.telInput.setAttribute(\"placeholder\", placeholder);\n                    }\n                }\n            }, {\n                key: \"_selectListItem\",\n                value: function _selectListItem(listItem) {\n                    // update selected flag and active list item\n                    var flagChanged = this._setFlag(listItem.getAttribute(\"data-country-code\"));\n                    this._closeDropdown();\n                    this._updateDialCode(listItem.getAttribute(\"data-dial-code\"), true);\n                    // focus the input\n                    this.telInput.focus();\n                    // put cursor at end - this fix is required for FF and IE11 (with nationalMode=false i.e. auto\n                    // inserting dial code), who try to put the cursor at the beginning the first time\n                    var len = this.telInput.value.length;\n                    this.telInput.setSelectionRange(len, len);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"_closeDropdown\",\n                value: function _closeDropdown() {\n                    this.countryList.classList.add(\"iti__hide\");\n                    this.selectedFlag.setAttribute(\"aria-expanded\", \"false\");\n                    // update the arrow\n                    this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n                    // unbind key events\n                    document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n                    document.documentElement.removeEventListener(\"click\", this._handleClickOffToClose);\n                    this.countryList.removeEventListener(\"mouseover\", this._handleMouseoverCountryList);\n                    this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n                    // remove menu from container\n                    if (this.options.dropdownContainer) {\n                        if (!this.isMobile) window.removeEventListener(\"scroll\", this._handleWindowScroll);\n                        if (this.dropdown.parentNode) this.dropdown.parentNode.removeChild(this.dropdown);\n                    }\n                    this._trigger(\"close:countrydropdown\");\n                }\n            }, {\n                key: \"_scrollTo\",\n                value: function _scrollTo(element, middle) {\n                    var container = this.countryList;\n                    // windowTop from https://stackoverflow.com/a/14384091/217866\n                    var windowTop = window.pageYOffset || document.documentElement.scrollTop;\n                    var containerHeight = container.offsetHeight;\n                    var containerTop = container.getBoundingClientRect().top + windowTop;\n                    var containerBottom = containerTop + containerHeight;\n                    var elementHeight = element.offsetHeight;\n                    var elementTop = element.getBoundingClientRect().top + windowTop;\n                    var elementBottom = elementTop + elementHeight;\n                    var newScrollTop = elementTop - containerTop + container.scrollTop;\n                    var middleOffset = containerHeight / 2 - elementHeight / 2;\n                    if (elementTop < containerTop) {\n                        // scroll up\n                        if (middle) newScrollTop -= middleOffset;\n                        container.scrollTop = newScrollTop;\n                    } else if (elementBottom > containerBottom) {\n                        // scroll down\n                        if (middle) newScrollTop += middleOffset;\n                        var heightDifference = containerHeight - elementHeight;\n                        container.scrollTop = newScrollTop - heightDifference;\n                    }\n                }\n            }, {\n                key: \"_updateDialCode\",\n                value: function _updateDialCode(newDialCodeBare, hasSelectedListItem) {\n                    var inputVal = this.telInput.value;\n                    // save having to pass this every time\n                    var newDialCode = \"+\".concat(newDialCodeBare);\n                    var newNumber;\n                    if (inputVal.charAt(0) === \"+\") {\n                        // there's a plus so we're dealing with a replacement (doesn't matter if nationalMode or not)\n                        var prevDialCode = this._getDialCode(inputVal);\n                        if (prevDialCode) {\n                            // current number contains a valid dial code, so replace it\n                            newNumber = inputVal.replace(prevDialCode, newDialCode);\n                        } else {\n                            // current number contains an invalid dial code, so ditch it\n                            // (no way to determine where the invalid dial code ends and the rest of the number begins)\n                            newNumber = newDialCode;\n                        }\n                    } else if (this.options.nationalMode || this.options.separateDialCode) {\n                        // don't do anything\n                        return;\n                    } else {\n                        // nationalMode is disabled\n                        if (inputVal) {\n                            // there is an existing value with no dial code: prefix the new dial code\n                            newNumber = newDialCode + inputVal;\n                        } else if (hasSelectedListItem || !this.options.autoHideDialCode) {\n                            // no existing value and either they've just selected a list item, or autoHideDialCode is\n                            // disabled: insert new dial code\n                            newNumber = newDialCode;\n                        } else {\n                            return;\n                        }\n                    }\n                    this.telInput.value = newNumber;\n                }\n            }, {\n                key: \"_getDialCode\",\n                value: function _getDialCode(number, includeAreaCode) {\n                    var dialCode = \"\";\n                    // only interested in international numbers (starting with a plus)\n                    if (number.charAt(0) === \"+\") {\n                        var numericChars = \"\";\n                        // iterate over chars\n                        for (var i = 0; i < number.length; i++) {\n                            var c = number.charAt(i);\n                            // if char is number (https://stackoverflow.com/a/8935649/217866)\n                            if (!isNaN(parseInt(c, 10))) {\n                                numericChars += c;\n                                // if current numericChars make a valid dial code\n                                if (includeAreaCode) {\n                                    if (this.countryCodes[numericChars]) {\n                                        // store the actual raw string (useful for matching later)\n                                        dialCode = number.substr(0, i + 1);\n                                    }\n                                } else {\n                                    if (this.dialCodes[numericChars]) {\n                                        dialCode = number.substr(0, i + 1);\n                                        // if we're just looking for a dial code, we can break as soon as we find one\n                                        break;\n                                    }\n                                }\n                                // stop searching as soon as we can - in this case when we hit max len\n                                if (numericChars.length === this.countryCodeMaxLen) {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    return dialCode;\n                }\n            }, {\n                key: \"_getFullNumber\",\n                value: function _getFullNumber() {\n                    var val = this.telInput.value.trim();\n                    var dialCode = this.selectedCountryData.dialCode;\n                    var prefix;\n                    var numericVal = this._getNumeric(val);\n                    if (this.options.separateDialCode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n                        // when using separateDialCode, it is visible so is effectively part of the typed number\n                        prefix = \"+\".concat(dialCode);\n                    } else {\n                        prefix = \"\";\n                    }\n                    return prefix + val;\n                }\n            }, {\n                key: \"_beforeSetNumber\",\n                value: function _beforeSetNumber(originalNumber) {\n                    var number = originalNumber;\n                    if (this.options.separateDialCode) {\n                        var dialCode = this._getDialCode(number);\n                        // if there is a valid dial code\n                        if (dialCode) {\n                            // in case _getDialCode returned an area code as well\n                            dialCode = \"+\".concat(this.selectedCountryData.dialCode);\n                            // a lot of numbers will have a space separating the dial code and the main number, and\n                            // some NANP numbers will have a hyphen e.g. +1 684-733-1234 - in both cases we want to get\n                            // rid of it\n                            // NOTE: don't just trim all non-numerics as may want to preserve an open parenthesis etc\n                            var start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n                            number = number.substr(start);\n                        }\n                    }\n                    return this._cap(number);\n                }\n            }, {\n                key: \"_triggerCountryChange\",\n                value: function _triggerCountryChange() {\n                    this._trigger(\"countrychange\");\n                }\n            }, {\n                key: \"handleAutoCountry\",\n                value: function handleAutoCountry() {\n                    if (this.options.initialCountry === \"auto\") {\n                        // we must set this even if there is an initial val in the input: in case the initial val is\n                        // invalid and they delete it - they should see their auto country\n                        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n                        // if there's no initial value in the input, then update the flag\n                        if (!this.telInput.value) {\n                            this.setCountry(this.defaultCountry);\n                        }\n                        this.resolveAutoCountryPromise();\n                    }\n                }\n            }, {\n                key: \"handleUtils\",\n                value: function handleUtils() {\n                    // if the request was successful\n                    if (window.intlTelInputUtils) {\n                        // if there's an initial value in the input, then format it\n                        if (this.telInput.value) {\n                            this._updateValFromNumber(this.telInput.value);\n                        }\n                        this._updatePlaceholder();\n                    }\n                    this.resolveUtilsScriptPromise();\n                }\n            }, {\n                key: \"destroy\",\n                value: function destroy() {\n                    var form = this.telInput.form;\n                    if (this.options.allowDropdown) {\n                        // make sure the dropdown is closed (and unbind listeners)\n                        this._closeDropdown();\n                        this.selectedFlag.removeEventListener(\"click\", this._handleClickSelectedFlag);\n                        this.flagsContainer.removeEventListener(\"keydown\", this._handleFlagsContainerKeydown);\n                        // label click hack\n                        var label = this._getClosestLabel();\n                        if (label) label.removeEventListener(\"click\", this._handleLabelClick);\n                    }\n                    // unbind hiddenInput listeners\n                    if (this.hiddenInput && form) form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n                    // unbind autoHideDialCode listeners\n                    if (this.options.autoHideDialCode) {\n                        if (form) form.removeEventListener(\"submit\", this._handleSubmitOrBlurEvent);\n                        this.telInput.removeEventListener(\"blur\", this._handleSubmitOrBlurEvent);\n                    }\n                    // unbind key events, and cut/paste events\n                    this.telInput.removeEventListener(\"keyup\", this._handleKeyupEvent);\n                    this.telInput.removeEventListener(\"cut\", this._handleClipboardEvent);\n                    this.telInput.removeEventListener(\"paste\", this._handleClipboardEvent);\n                    // remove attribute of id instance: data-intl-tel-input-id\n                    this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n                    // remove markup (but leave the original input)\n                    var wrapper = this.telInput.parentNode;\n                    wrapper.parentNode.insertBefore(this.telInput, wrapper);\n                    wrapper.parentNode.removeChild(wrapper);\n                    delete window.intlTelInputGlobals.instances[this.id];\n                }\n            }, {\n                key: \"getExtension\",\n                value: function getExtension() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getExtension(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumber\",\n                value: function getNumber(format) {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.formatNumber(this._getFullNumber(), iso2, format);\n                    }\n                    return \"\";\n                }\n            }, {\n                key: \"getNumberType\",\n                value: function getNumberType() {\n                    if (window.intlTelInputUtils) {\n                        return intlTelInputUtils.getNumberType(this._getFullNumber(), this.selectedCountryData.iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"getSelectedCountryData\",\n                value: function getSelectedCountryData() {\n                    return this.selectedCountryData;\n                }\n            }, {\n                key: \"getValidationError\",\n                value: function getValidationError() {\n                    if (window.intlTelInputUtils) {\n                        var iso2 = this.selectedCountryData.iso2;\n                        return intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n                    }\n                    return -99;\n                }\n            }, {\n                key: \"isValidNumber\",\n                value: function isValidNumber() {\n                    var val = this._getFullNumber().trim();\n                    var countryCode = this.options.nationalMode ? this.selectedCountryData.iso2 : \"\";\n                    return window.intlTelInputUtils ? intlTelInputUtils.isValidNumber(val, countryCode) : null;\n                }\n            }, {\n                key: \"setCountry\",\n                value: function setCountry(originalCountryCode) {\n                    var countryCode = originalCountryCode.toLowerCase();\n                    // check if already selected\n                    if (!this.selectedFlagInner.classList.contains(\"iti__\".concat(countryCode))) {\n                        this._setFlag(countryCode);\n                        this._updateDialCode(this.selectedCountryData.dialCode, false);\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setNumber\",\n                value: function setNumber(number) {\n                    // we must update the flag first, which updates this.selectedCountryData, which is used for\n                    // formatting the number before displaying it\n                    var flagChanged = this._updateFlagFromNumber(number);\n                    this._updateValFromNumber(number);\n                    if (flagChanged) {\n                        this._triggerCountryChange();\n                    }\n                }\n            }, {\n                key: \"setPlaceholderNumberType\",\n                value: function setPlaceholderNumberType(type) {\n                    this.options.placeholderNumberType = type;\n                    this._updatePlaceholder();\n                }\n            } ]);\n            return Iti;\n        }();\n        /********************\n *  STATIC METHODS\n ********************/\n        // get the country data object\n        intlTelInputGlobals.getCountryData = function() {\n            return allCountries;\n        };\n        // inject a <script> element to load utils.js\n        var injectScript = function injectScript(path, handleSuccess, handleFailure) {\n            // inject a new script element into the page\n            var script = document.createElement(\"script\");\n            script.onload = function() {\n                forEachInstance(\"handleUtils\");\n                if (handleSuccess) handleSuccess();\n            };\n            script.onerror = function() {\n                forEachInstance(\"rejectUtilsScriptPromise\");\n                if (handleFailure) handleFailure();\n            };\n            script.className = \"iti-load-utils\";\n            script.async = true;\n            script.src = path;\n            document.body.appendChild(script);\n        };\n        // load the utils script\n        intlTelInputGlobals.loadUtils = function(path) {\n            // 2 options:\n            // 1) not already started loading (start)\n            // 2) already started loading (do nothing - just wait for the onload callback to fire, which will\n            // trigger handleUtils on all instances, invoking their resolveUtilsScriptPromise functions)\n            if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n                // only do this once\n                window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n                // if we have promises, then return a promise\n                if (typeof Promise !== \"undefined\") {\n                    return new Promise(function(resolve, reject) {\n                        return injectScript(path, resolve, reject);\n                    });\n                }\n                injectScript(path);\n            }\n            return null;\n        };\n        // default options\n        intlTelInputGlobals.defaults = defaults;\n        // version\n        intlTelInputGlobals.version = \"17.0.13\";\n        // convenience wrapper\n        return function(input, options) {\n            var iti = new Iti(input, options);\n            iti._init();\n            input.setAttribute(\"data-intl-tel-input-id\", iti.id);\n            window.intlTelInputGlobals.instances[iti.id] = iti;\n            return iti;\n        };\n    }();\n});"],"sourceRoot":""}